// UI Components Service - HextaUI Integration
// This service defines UI components from HextaUI that are linked to specific design types

export const UI_COMPONENTS_DATA = {
  'minimalistic': {
    designName: 'Modern Minimalistic',
    uiLibrary: 'HextaUI',
    components: [
      {
        name: 'Card',
        category: 'Layout',
        description: 'A modern card component with a beautiful glow effect for creating visually appealing containers.',
        installation: {
          dependencies: 'npm install motion',
          cli: 'npx shadcn-ui@latest add card'
        },
        usage: `import { GlowEffect } from "@/components/ui/glow-effect";`,
        variants: ['rotate', 'pulse', 'breathe', 'colorShift', 'flowHorizontal', 'static'],
        sizes: ['scale', 'blur'],
        fullContent: `# Glow Effect Card Component

## Overview

A modern card component with a beautiful glow effect for creating visually appealing containers.

## Installation

### Install Dependencies

\`\`\`bash
npm install motion
# or
pnpm add motion
# or
yarn add motion
# or
bun add motion
\`\`\`

### Component Files

Create the following files in your components directory:

\`\`\`tsx
// components/ui/glow-effect.tsx
'use client';
import { cn } from '@/lib/utils';
import { motion, Transition } from 'motion/react';

export type GlowEffectProps = {
  className?: string;
  style?: React.CSSProperties;
  colors?: string[];
  mode?:
    | 'rotate'
    | 'pulse'
    | 'breathe'
    | 'colorShift'
    | 'flowHorizontal'
    | 'static';
  blur?:
    | number
    | 'softest'
    | 'soft'
    | 'medium'
    | 'strong'
    | 'stronger'
    | 'strongest'
    | 'none';
  transition?: Transition;
  scale?: number;
  duration?: number;
};

export function GlowEffect({
  className,
  style,
  colors = ['#FF5733', '#33FF57', '#3357FF', '#F1C40F'],
  mode = 'rotate',
  blur = 'medium',
  transition,
  scale = 1,
  duration = 5,
}: GlowEffectProps) {
  const BASE_TRANSITION = {
    repeat: Infinity,
    duration: duration,
    ease: 'linear',
  };

  const animations = {
    rotate: {
      background: [
        \`conic-gradient(from 0deg at 50% 50%, \${colors.join(', ')})\`,
        \`conic-gradient(from 360deg at 50% 50%, \${colors.join(', ')})\`,
      ],
      transition: {
        ...(transition ?? BASE_TRANSITION),
      },
    },
    pulse: {
      background: colors.map(
        (color) =>
          \`radial-gradient(circle at 50% 50%, \${color} 0%, transparent 100%)\`
      ),
      scale: [1 * scale, 1.1 * scale, 1 * scale],
      opacity: [0.5, 0.8, 0.5],
      transition: {
        ...(transition ?? {
          ...BASE_TRANSITION,
          repeatType: 'mirror',
        }),
      },
    },
    breathe: {
      background: [
        ...colors.map(
          (color) =>
            \`radial-gradient(circle at 50% 50%, \${color} 0%, transparent 100%)\`
        ),
      ],
      scale: [1 * scale, 1.05 * scale, 1 * scale],
      transition: {
        ...(transition ?? {
          ...BASE_TRANSITION,
          repeatType: 'mirror',
        }),
      },
    },
    colorShift: {
      background: colors.map((color, index) => {
        const nextColor = colors[(index + 1) % colors.length];
        return \`conic-gradient(from 0deg at 50% 50%, \${color} 0%, \${nextColor} 50%, \${color} 100%)\`;
      }),
      transition: {
        ...(transition ?? {
          ...BASE_TRANSITION,
          repeatType: 'mirror',
        }),
      },
    },
    flowHorizontal: {
      background: colors.map((color) => {
        const nextColor = colors[(colors.indexOf(color) + 1) % colors.length];
        return \`linear-gradient(to right, \${color}, \${nextColor})\`;
      }),
      transition: {
        ...(transition ?? {
          ...BASE_TRANSITION,
          repeatType: 'mirror',
        }),
      },
    },
    static: {
      background: \`linear-gradient(to right, \${colors.join(', ')})\`,
    },
  };

  const getBlurClass = (blur: GlowEffectProps['blur']) => {
    if (typeof blur === 'number') {
      return \`blur-[\${blur}px]\`;
    }

    const presets = {
      softest: 'blur-sm',
      soft: 'blur',
      medium: 'blur-md',
      strong: 'blur-lg',
      stronger: 'blur-xl',
      strongest: 'blur-xl',
      none: 'blur-none',
    };

    return presets[blur as keyof typeof presets];
  };

  return (
    <motion.div
      style={
        {
          ...style,
          '--scale': scale,
          willChange: 'transform',
          backfaceVisibility: 'hidden',
        } as React.CSSProperties
      }
      animate={animations[mode]}
      className={cn(
        'pointer-events-none absolute inset-0 h-full w-full',
        'scale-[var(--scale)] transform-gpu',
        getBlurClass(blur),
        className
      )}
    />
  );
}
\`\`\`

## Usage

### Basic Usage

\`\`\`tsx
import { GlowEffect } from '@/components/ui/glow-effect';

export function GlowEffectCardBackground() {
  return (
    <div className='relative h-44 w-64'>
      <GlowEffect
        colors={['#0894FF', '#C959DD', '#FF2E54', '#FF9004']}
        mode='static'
        blur='medium'
      />
      <div className='relative h-44 w-64 rounded-lg bg-black p-2 text-white dark:bg-white dark:text-black'>
        <svg
          role='img'
          xmlns='<http://www.w3.org/2000/svg>'
          viewBox='0 0 70 70'
          aria-label='MP Logo'
          width='70'
          height='70'
          className='absolute bottom-4 right-4 h-8 w-8'
          fill='none'
        >
          <path
            stroke='currentColor'
            strokeLinecap='round'
            strokeWidth='3'
            d='M51.883 26.495c-7.277-4.124-18.08-7.004-26.519-7.425-2.357-.118-4.407-.244-6.364 1.06M59.642 51c-10.47-7.25-26.594-13.426-39.514-15.664-3.61-.625-6.744-1.202-9.991.263'
          ></path>
        </svg>
      </div>
    </div>
  );
}
\`\`\`

### Variants

The GlowEffect component supports different animation modes:

- **rotate**: Rotating gradient effect
- **pulse**: Pulsing radial gradient
- **breathe**: Subtle breathing animation
- **colorShift**: Smooth color transitions
- **flowHorizontal**: Horizontal flowing gradient
- **static**: Static gradient background

### Blur Options

Available blur intensities:

- **softest**: Very subtle blur
- **soft**: Light blur
- **medium**: Standard blur
- **strong**: Heavy blur
- **stronger**: Very heavy blur
- **strongest**: Maximum blur
- **none**: No blur
- **number**: Custom blur value in pixels

### Examples

#### Rotating Glow Card
\`\`\`tsx
<div className="relative h-64 w-96">
  <GlowEffect
    colors={['#FF5733', '#33FF57', '#3357FF', '#F1C40F']}
    mode="rotate"
    blur="medium"
    duration={8}
  />
  <div className="relative h-full w-full rounded-xl bg-black/80 p-6 text-white">
    <h2 className="text-2xl font-bold">Rotating Glow</h2>
    <p className="mt-2">A card with rotating gradient effect</p>
  </div>
</div>
\`\`\`

#### Breathing Effect Card
\`\`\`tsx
<div className="relative h-48 w-80">
  <GlowEffect
    colors={['#8A2BE2', '#4B0082']}
    mode="breathe"
    blur="soft"
    scale={1.1}
    duration={3}
  />
  <div className="relative h-full w-full rounded-lg bg-white/10 p-4 backdrop-blur-sm">
    <h3 className="text-xl font-semibold">Breathing Glow</h3>
    <p>Subtle breathing animation effect</p>
  </div>
</div>
\`\`\`

#### Color Shift Card
\`\`\`tsx
<div className="relative h-56 w-72">
  <GlowEffect
    colors={['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']}
    mode="colorShift"
    blur="strong"
    duration={6}
  />
  <div className="relative flex h-full w-full items-center justify-center rounded-xl bg-black/70 text-center text-white">
    <div>
      <h2 className="text-2xl font-bold">Color Shift</h2>
      <p className="mt-2">Smooth color transitions</p>
    </div>
  </div>
</div>
\`\`\`

## Accessibility

The GlowEffect component is designed with accessibility in mind:

- Non-interactive background effect
- No impact on content readability
- Reduced motion support
- High contrast maintained for content

## Best Practices

- Use appropriate color combinations
- Consider reduced motion preferences
- Maintain content readability
- Use appropriate blur intensity
- Consider performance impact
- Test across different devices`,
        examples: [
          {
            name: 'Basic Glow Card',
            code: `<div className="relative h-44 w-64">
  <GlowEffect
    colors={['#0894FF', '#C959DD', '#FF2E54', '#FF9004']}
    mode="static"
    blur="medium"
  />
  <div className="relative h-full w-full rounded-lg bg-black/80 p-4 text-white">
    <h2>Basic Glow Card</h2>
    <p>Simple static glow effect</p>
  </div>
</div>`
          },
          {
            name: 'Interactive Glow Card',
            code: `<div className="relative h-64 w-96 group">
  <GlowEffect
    colors={['#FF5733', '#33FF57', '#3357FF']}
    mode="rotate"
    blur="soft"
    scale={1.1}
    className="opacity-0 group-hover:opacity-100 transition-opacity"
  />
  <div className="relative h-full w-full rounded-xl bg-black/80 p-6 text-white">
    <h2 className="text-2xl font-bold">Hover Me</h2>
    <p className="mt-2">Interactive glow effect on hover</p>
  </div>
</div>`
          }
        ]
      },
      {
        name: 'Button',
        category: 'Interactive',
        description: 'A collection of modern button components including liquid glass effect and metal buttons.',
        installation: {
          dependencies: 'npm install @radix-ui/react-slot class-variance-authority',
          cli: 'npx shadcn-ui@latest add button'
        },
        usage: `import { Button, LiquidButton, MetalButton } from "@/components/ui/liquid-glass-button";`,
        variants: ['default', 'destructive', 'cool', 'outline', 'secondary', 'ghost', 'link'],
        sizes: ['default', 'sm', 'lg', 'xl', 'xxl', 'icon'],
        features: ['liquid glass effect', 'metal effect', 'shine effect', 'hover states', 'touch interactions'],
        fullContent: `# Modern Button Components

## Overview

A collection of modern button components including liquid glass effect and metal buttons.

## Installation

### Install Dependencies

\`\`\`bash
npm install @radix-ui/react-slot class-variance-authority
# or
pnpm add @radix-ui/react-slot class-variance-authority
# or
yarn add @radix-ui/react-slot class-variance-authority
# or
bun add @radix-ui/react-slot class-variance-authority
\`\`\`

### Component Files

Create the following files in your components directory:

\`\`\`tsx
// components/ui/liquid-glass-button.tsx
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center cursor-pointer justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-primary-foreground hover:bg-destructive/90",
        cool: "dark:inset-shadow-2xs dark:inset-shadow-white/10 bg-linear-to-t border border-b-2 border-zinc-950/40 from-primary to-primary/85 shadow-md shadow-primary/20 ring-1 ring-inset ring-white/25 transition-[filter] duration-200 hover:brightness-110 active:brightness-90 dark:border-x-0 text-primary-foreground dark:text-primary-foreground dark:border-t-0 dark:border-primary/50 dark:ring-white/5",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants, liquidbuttonVariants, LiquidButton }

const liquidbuttonVariants = cva(
  "inline-flex items-center transition-colors justify-center cursor-pointer gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-transparent hover:scale-105 duration-300 transition text-primary",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 text-xs gap-1.5 px-4 has-[>svg]:px-4",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        xl: "h-12 rounded-md px-8 has-[>svg]:px-6",
        xxl: "h-14 rounded-md px-10 has-[>svg]:px-8",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "xxl",
    },
  }
)

function LiquidButton({
  className,
  variant,
  size,
  asChild = false,
  children,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof liquidbuttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <>
      <Comp
        data-slot="button"
        className={cn(
          "relative",
          liquidbuttonVariants({ variant, size, className })
        )}
        {...props}
      >
        <div className="absolute top-0 left-0 z-0 h-full w-full rounded-full
            shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)]
        transition-all
        dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]" />
        <div
          className="absolute top-0 left-0 isolate -z-10 h-full w-full overflow-hidden rounded-md"
          style={{ backdropFilter: 'url("#container-glass")' }}
        />

        <div className="pointer-events-none z-10 ">
          {children}
        </div>
        <GlassFilter />
      </Comp>
    </>
  )
}

function GlassFilter() {
  return (
    <svg className="hidden">
      <defs>
        <filter
          id="container-glass"
          x="0%"
          y="0%"
          width="100%"
          height="100%"
          colorInterpolationFilters="sRGB"
        >
          {/* Generate turbulent noise for distortion */}
          <feTurbulence
            type="fractalNoise"
            baseFrequency="0.05 0.05"
            numOctaves="1"
            seed="1"
            result="turbulence"
          />

          {/* Blur the turbulence pattern slightly */}
          <feGaussianBlur in="turbulence" stdDeviation="2" result="blurredNoise" />

          {/* Displace the source graphic with the noise */}
          <feDisplacementMap
            in="SourceGraphic"
            in2="blurredNoise"
            scale="70"
            xChannelSelector="R"
            yChannelSelector="B"
            result="displaced"
          />

          {/* Apply overall blur on the final result */}
          <feGaussianBlur in="displaced" stdDeviation="4" result="finalBlur" />

          {/* Output the result */}
          <feComposite in="finalBlur" in2="finalBlur" operator="over" />
        </filter>
      </defs>
    </svg>
  );
}

type ColorVariant =
  | "default"
  | "primary"
  | "success"
  | "error"
  | "gold"
  | "bronze";

interface MetalButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ColorVariant;
}

const colorVariants: Record<
  ColorVariant,
  {
    outer: string;
    inner: string;
    button: string;
    textColor: string;
    textShadow: string;
  }
> = {
  default: {
    outer: "bg-gradient-to-b from-[#000] to-[#A0A0A0]",
    inner: "bg-gradient-to-b from-[#FAFAFA] via-[#3E3E3E] to-[#E5E5E5]",
    button: "bg-gradient-to-b from-[#B9B9B9] to-[#969696]",
    textColor: "text-white",
    textShadow: "[text-shadow:_0_-1px_0_rgb(80_80_80_/_100%)]",
  },
  primary: {
    outer: "bg-gradient-to-b from-[#000] to-[#A0A0A0]",
    inner: "bg-gradient-to-b from-primary via-secondary to-muted",
    button: "bg-gradient-to-b from-primary to-primary/40",
    textColor: "text-white",
    textShadow: "[text-shadow:_0_-1px_0_rgb(30_58_138_/_100%)]",
  },
  success: {
    outer: "bg-gradient-to-b from-[#005A43] to-[#7CCB9B]",
    inner: "bg-gradient-to-b from-[#E5F8F0] via-[#00352F] to-[#D1F0E6]",
    button: "bg-gradient-to-b from-[#9ADBC8] to-[#3E8F7C]",
    textColor: "text-[#FFF7F0]",
    textShadow: "[text-shadow:_0_-1px_0_rgb(6_78_59_/_100%)]",
  },
  error: {
    outer: "bg-gradient-to-b from-[#5A0000] to-[#FFAEB0]",
    inner: "bg-gradient-to-b from-[#FFDEDE] via-[#680002] to-[#FFE9E9]",
    button: "bg-gradient-to-b from-[#F08D8F] to-[#A45253]",
    textColor: "text-[#FFF7F0]",
    textShadow: "[text-shadow:_0_-1px_0_rgb(146_64_14_/_100%)]",
  },
  gold: {
    outer: "bg-gradient-to-b from-[#917100] to-[#EAD98F]",
    inner: "bg-gradient-to-b from-[#FFFDDD] via-[#856807] to-[#FFF1B3]",
    button: "bg-gradient-to-b from-[#FFEBA1] to-[#9B873F]",
    textColor: "text-[#FFFDE5]",
    textShadow: "[text-shadow:_0_-1px_0_rgb(178_140_2_/_100%)]",
  },
  bronze: {
    outer: "bg-gradient-to-b from-[#864813] to-[#E9B486]",
    inner: "bg-gradient-to-b from-[#EDC5A1] via-[#5F2D01] to-[#FFDEC1]",
    button: "bg-gradient-to-b from-[#FFE3C9] to-[#A36F3D]",
    textColor: "text-[#FFF7F0]",
    textShadow: "[text-shadow:_0_-1px_0_rgb(124_45_18_/_100%)]",
  },
};

const metalButtonVariants = (
  variant: ColorVariant = "default",
  isPressed: boolean,
  isHovered: boolean,
  isTouchDevice: boolean,
) => {
  const colors = colorVariants[variant];
  const transitionStyle = "all 250ms cubic-bezier(0.1, 0.4, 0.2, 1)";

  return {
    wrapper: cn(
      "relative inline-flex transform-gpu rounded-md p-[1.25px] will-change-transform",
      colors.outer,
    ),
    wrapperStyle: {
      transform: isPressed
        ? "translateY(2.5px) scale(0.99)"
        : "translateY(0) scale(1)",
      boxShadow: isPressed
        ? "0 1px 2px rgba(0, 0, 0, 0.15)"
        : isHovered && !isTouchDevice
          ? "0 4px 12px rgba(0, 0, 0, 0.12)"
          : "0 3px 8px rgba(0, 0, 0, 0.08)",
      transition: transitionStyle,
      transformOrigin: "center center",
    },
    inner: cn(
      "absolute inset-[1px] transform-gpu rounded-lg will-change-transform",
      colors.inner,
    ),
    innerStyle: {
      transition: transitionStyle,
      transformOrigin: "center center",
      filter:
        isHovered && !isPressed && !isTouchDevice ? "brightness(1.05)" : "none",
    },
    button: cn(
      "relative z-10 m-[1px] rounded-md inline-flex h-11 transform-gpu cursor-pointer items-center justify-center overflow-hidden rounded-md px-6 py-2 text-sm leading-none font-semibold will-change-transform outline-none",
      colors.button,
      colors.textColor,
      colors.textShadow,
    ),
    buttonStyle: {
      transform: isPressed ? "scale(0.97)" : "scale(1)",
      transition: transitionStyle,
      transformOrigin: "center center",
      filter:
        isHovered && !isPressed && !isTouchDevice ? "brightness(1.02)" : "none",
    },
  };
};

const ShineEffect = ({ isPressed }: { isPressed: boolean }) => {
  return (
    <div
      className={cn(
        "pointer-events-none absolute inset-0 z-20 overflow-hidden transition-opacity duration-300",
        isPressed ? "opacity-20" : "opacity-0",
      )}
    >
      <div className="absolute inset-0 rounded-md bg-gradient-to-r from-transparent via-neutral-100 to-transparent" />
    </div>
  );
};

export const MetalButton = React.forwardRef<
  HTMLButtonElement,
  MetalButtonProps
>(({ children, className, variant = "default", ...props }, ref) => {
  const [isPressed, setIsPressed] = React.useState(false);
  const [isHovered, setIsHovered] = React.useState(false);
  const [isTouchDevice, setIsTouchDevice] = React.useState(false);

  React.useEffect(() => {
    setIsTouchDevice("ontouchstart" in window || navigator.maxTouchPoints > 0);
  }, []);

  const buttonText = children || "Button";
  const variants = metalButtonVariants(
    variant,
    isPressed,
    isHovered,
    isTouchDevice,
  );

  const handleInternalMouseDown = () => {
    setIsPressed(true);
  };
  const handleInternalMouseUp = () => {
    setIsPressed(false);
  };
  const handleInternalMouseLeave = () => {
    setIsPressed(false);
    setIsHovered(false);
  };
  const handleInternalMouseEnter = () => {
    if (!isTouchDevice) {
      setIsHovered(true);
    }
  };
  const handleInternalTouchStart = () => {
    setIsPressed(true);
  };
  const handleInternalTouchEnd = () => {
    setIsPressed(false);
  };
  const handleInternalTouchCancel = () => {
    setIsPressed(false);
  };

  return (
    <div className={variants.wrapper} style={variants.wrapperStyle}>
      <div className={variants.inner} style={variants.innerStyle}></div>
      <button
        ref={ref}
        className={cn(variants.button, className)}
        style={variants.buttonStyle}
        {...props}
        onMouseDown={handleInternalMouseDown}
        onMouseUp={handleInternalMouseUp}
        onMouseLeave={handleInternalMouseLeave}
        onMouseEnter={handleInternalMouseEnter}
        onTouchStart={handleInternalTouchStart}
        onTouchEnd={handleInternalTouchEnd}
        onTouchCancel={handleInternalTouchCancel}
      >
        <ShineEffect isPressed={isPressed} />
        {buttonText}
        {isHovered && !isPressed && !isTouchDevice && (
          <div className="pointer-events-none absolute inset-0 bg-gradient-to-t rounded-lg from-transparent to-white/5" />
        )}
      </button>
    </div>
  );
});

MetalButton.displayName = "MetalButton";
\`\`\`

## Usage

### Basic Usage

\`\`\`tsx
import { LiquidButton } from "@/components/ui/liquid-glass-button";

export default function DemoOne() {
  return (
    <>
      <div className="relative h-[200px] w-[800px]">
        <LiquidButton className="absolute top-1/2 left-1/2 z-10 -translate-x-1/2 -translate-y-1/2">
          Liquid Glass
        </LiquidButton>
      </div>
    </>
  )
}
\`\`\`

### Button Types

1. **Regular Button**: Standard button with variants
2. **Liquid Glass Button**: Modern glass effect with liquid animations
3. **Metal Button**: Metallic effect with shine and press animations

### Variants

The Button components support different variants:

#### Regular Button
- **default**: Primary button with solid background
- **destructive**: Red button for dangerous actions
- **cool**: Modern gradient effect
- **outline**: Button with border
- **secondary**: Secondary button with muted background
- **ghost**: Transparent button
- **link**: Button that looks like a link

#### Liquid Glass Button
- **default**: Transparent with scale effect
- **destructive**: Red glass effect
- **outline**: Bordered glass effect
- **secondary**: Secondary glass effect
- **ghost**: Minimal glass effect
- **link**: Link-style glass effect

#### Metal Button
- **default**: Standard metallic
- **primary**: Primary color metallic
- **success**: Green metallic
- **error**: Red metallic
- **gold**: Gold metallic
- **bronze**: Bronze metallic

### Sizes

Available sizes for the Button components:

- **default**: Standard size
- **sm**: Small button
- **lg**: Large button
- **xl**: Extra large
- **xxl**: Double extra large
- **icon**: Square icon button

### Examples

#### Regular Button Variants
\`\`\`tsx
<div className="flex gap-2">
  <Button variant="default">Default</Button>
  <Button variant="destructive">Delete</Button>
  <Button variant="cool">Cool</Button>
  <Button variant="outline">Outline</Button>
</div>
\`\`\`

#### Liquid Glass Button Examples
\`\`\`tsx
<div className="space-y-4">
  <LiquidButton size="xxl">
    Get Started
  </LiquidButton>
  
  <LiquidButton variant="destructive" size="lg">
    Delete Account
  </LiquidButton>
  
  <LiquidButton variant="outline" size="default">
    Learn More
  </LiquidButton>
</div>
\`\`\`

#### Metal Button Examples
\`\`\`tsx
<div className="space-y-4">
  <MetalButton variant="gold">
    Premium Access
  </MetalButton>
  
  <MetalButton variant="primary">
    Continue
  </MetalButton>
  
  <MetalButton variant="bronze">
    Bronze Tier
  </MetalButton>
</div>
\`\`\`

## Accessibility

The Button components are built with accessibility in mind:

- Proper ARIA attributes
- Keyboard navigation support
- Focus management
- Touch device optimization
- Reduced motion support
- High contrast maintained

## Best Practices

- Use appropriate variants for different contexts
- Consider button hierarchy in your design
- Maintain readable text contrast
- Use appropriate sizes for different devices
- Consider reduced motion preferences
- Test touch interactions
- Ensure proper spacing between buttons
- Use consistent styling within context`,
        examples: [
          {
            name: 'Liquid Glass Button',
            code: `<div className="relative h-[200px] w-[800px]">
  <LiquidButton className="absolute top-1/2 left-1/2 z-10 -translate-x-1/2 -translate-y-1/2">
    Liquid Glass
  </LiquidButton>
</div>`
          },
          {
            name: 'Metal Button',
            code: `<div className="space-y-4">
  <MetalButton variant="gold">Premium Access</MetalButton>
  <MetalButton variant="primary">Continue</MetalButton>
  <MetalButton variant="bronze">Bronze Tier</MetalButton>
</div>`
          }
        ]
      }
    ],
    theme: {
      name: 'HextaUI Light Theme',
      colors: {
        background: 'hsl(0, 0%, 100%)',
        foreground: 'hsl(0, 0%, 14%)',
        card: 'hsl(0, 0%, 99%)',
        'card-foreground': 'hsl(0, 0%, 14%)',
        primary: 'hsl(235, 100%, 60%)',
        'primary-foreground': 'hsl(0, 0%, 98%)',
        secondary: 'hsl(0, 0%, 97%)',
        'secondary-foreground': 'hsl(0, 0%, 20%)',
        muted: 'hsl(0, 0%, 97%)',
        'muted-foreground': 'hsl(0, 0%, 56%)',
        accent: 'hsl(0, 0%, 96%)',
        'accent-foreground': 'hsl(0, 0%, 20%)',
        destructive: 'hsl(9, 96%, 47%)',
        'destructive-foreground': 'hsl(0, 0%, 98%)',
        border: 'hsl(0, 0%, 92%)',
        input: 'hsl(0, 0%, 100%)',
        ring: 'hsl(0, 0%, 71%)'
      },
      radius: {
        ele: '0.8rem',
        card: '1rem'
      }
    },
    themingContent: `# Theming - HextaUI

## Overview

Comprehensive theming system for customizing colors, typography, spacing, and other design tokens across your application.

## Installation

### Install Dependencies

\`\`\`bash
npm install tailwindcss @tailwindcss/typography
# or
pnpm add tailwindcss @tailwindcss/typography
# or
yarn add tailwindcss @tailwindcss/typography
# or
bun add tailwindcss @tailwindcss/typography
\`\`\`

### Quick Install via CLI

You can also use the HextaUI CLI:

\`\`\`bash
npx hextaui@latest add theming
# or
pnpm dlx hextaui@latest add theming
# or
yarn dlx hextaui@latest add theming
# or
bun x hextaui@latest add theming
\`\`\`

## Usage

### Basic Setup

Create a CSS file (e.g., \`globals.css\`) with the following content:

\`\`\`css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
\`\`\`

### Tailwind Configuration

Update your \`tailwind.config.js\`:

\`\`\`js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
\`\`\`

### Color Schemes

#### Light Theme (Default)
\`\`\`css
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --muted: 210 40% 96%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --accent: 210 40% 96%;
  --accent-foreground: 222.2 84% 4.9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 222.2 84% 4.9%;
  --radius: 0.5rem;
}
\`\`\`

#### Dark Theme
\`\`\`css
.dark {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;
  --card: 222.2 84% 4.9%;
  --card-foreground: 210 40% 98%;
  --popover: 222.2 84% 4.9%;
  --popover-foreground: 210 40% 98%;
  --primary: 210 40% 98%;
  --primary-foreground: 222.2 47.4% 11.2%;
  --secondary: 217.2 32.6% 17.5%;
  --secondary-foreground: 210 40% 98%;
  --muted: 217.2 32.6% 17.5%;
  --muted-foreground: 215 20.2% 65.1%;
  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;
  --border: 217.2 32.6% 17.5%;
  --input: 217.2 32.6% 17.5%;
  --ring: 212.7 26.8% 83.9%;
}
\`\`\`

### Custom Color Schemes

#### Blue Theme
\`\`\`css
:root {
  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;
}
\`\`\`

#### Green Theme
\`\`\`css
:root {
  --primary: 142.1 76.2% 36.3%;
  --primary-foreground: 355.7 100% 97.3%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;
}
\`\`\`

#### Purple Theme
\`\`\`css
:root {
  --primary: 262.1 83.3% 57.8%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;
}
\`\`\`

### Typography

#### Font Configuration
\`\`\`js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      fontFamily: {
        sans: ["Inter", "system-ui", "sans-serif"],
        mono: ["JetBrains Mono", "monospace"],
      },
      fontSize: {
        xs: ["0.75rem", { lineHeight: "1rem" }],
        sm: ["0.875rem", { lineHeight: "1.25rem" }],
        base: ["1rem", { lineHeight: "1.5rem" }],
        lg: ["1.125rem", { lineHeight: "1.75rem" }],
        xl: ["1.25rem", { lineHeight: "1.75rem" }],
        "2xl": ["1.5rem", { lineHeight: "2rem" }],
        "3xl": ["1.875rem", { lineHeight: "2.25rem" }],
        "4xl": ["2.25rem", { lineHeight: "2.5rem" }],
        "5xl": ["3rem", { lineHeight: "1" }],
        "6xl": ["3.75rem", { lineHeight: "1" }],
      },
    },
  },
}
\`\`\`

#### Font Usage
\`\`\`tsx
<h1 className="text-4xl font-bold">Large Heading</h1>
<p className="text-base text-muted-foreground">Body text</p>
<code className="font-mono text-sm">Code snippet</code>
\`\`\`

### Spacing and Layout

#### Container Sizes
\`\`\`js
// tailwind.config.js
module.exports = {
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
  },
}
\`\`\`

#### Spacing Scale
\`\`\`tsx
<div className="p-4">Small padding</div>
<div className="p-6">Default padding</div>
<div className="p-8">Large padding</div>
<div className="p-10">Extra large padding</div>
\`\`\`

### Border Radius

#### Radius Scale
\`\`\`css
:root {
  --radius: 0.5rem;
}
\`\`\`

\`\`\`js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
}
\`\`\`

#### Usage
\`\`\`tsx
<div className="rounded-sm">Small radius</div>
<div className="rounded-md">Medium radius</div>
<div className="rounded-lg">Large radius</div>
\`\`\`

### Shadows

#### Shadow Configuration
\`\`\`js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      boxShadow: {
        sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
        DEFAULT: "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
        md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
        lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
        xl: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
        "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
      },
    },
  },
}
\`\`\`

#### Usage
\`\`\`tsx
<div className="shadow-sm">Small shadow</div>
<div className="shadow-md">Medium shadow</div>
<div className="shadow-lg">Large shadow</div>
<div className="shadow-xl">Extra large shadow</div>
\`\`\`

### Animations

#### Animation Configuration
\`\`\`js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
        "fade-in": {
          from: { opacity: 0 },
          to: { opacity: 1 },
        },
        "slide-in": {
          from: { transform: "translateY(10px)", opacity: 0 },
          to: { transform: "translateY(0)", opacity: 1 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.5s ease-out",
        "slide-in": "slide-in 0.3s ease-out",
      },
    },
  },
}
\`\`\`

#### Usage
\`\`\`tsx
<div className="animate-fade-in">Fade in animation</div>
<div className="animate-slide-in">Slide in animation</div>
\`\`\`

### Theme Switching

#### Dark Mode Toggle
\`\`\`tsx
import { useState, useEffect } from 'react';

export function ThemeToggle() {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
  }, [theme]);

  return (
    <button
      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
      className="p-2 rounded-md bg-secondary text-secondary-foreground"
    >
      {theme === 'light' ? '🌙' : '☀️'}
    </button>
  );
}
\`\`\`

#### System Theme Detection
\`\`\`tsx
import { useState, useEffect } from 'react';

export function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('system');

  useEffect(() => {
    const root = window.document.documentElement;
    
    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      root.classList.remove('light', 'dark');
      root.classList.add(systemTheme);
    } else {
      root.classList.remove('light', 'dark');
      root.classList.add(theme);
    }
  }, [theme]);

  return (
    <div>
      {children}
      <select value={theme} onChange={(e) => setTheme(e.target.value)}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="system">System</option>
      </select>
    </div>
  );
}
\`\`\`

### Best Practices

#### Color Usage
- Use semantic color names (primary, secondary, etc.)
- Maintain proper contrast ratios
- Test colors in both light and dark modes
- Use HSL values for better color manipulation

#### Typography
- Establish a clear hierarchy with font sizes
- Use consistent line heights
- Choose readable fonts for body text
- Use monospace fonts for code

#### Spacing
- Use consistent spacing scale
- Maintain visual rhythm
- Consider mobile responsiveness
- Use container queries for adaptive layouts

#### Accessibility
- Ensure sufficient color contrast
- Provide focus indicators
- Support reduced motion preferences
- Test with screen readers

#### Performance
- Minimize CSS bundle size
- Use CSS custom properties efficiently
- Optimize animations for performance
- Consider critical CSS loading`,
    setupInstructions: `# Setup HextaUI for Modern Minimalistic Design

## 1. Install Dependencies
\`\`\`bash
npm install @radix-ui/react-slot class-variance-authority
\`\`\`

## 2. Install Components
\`\`\`bash
npx hextaui@latest add card button
\`\`\`

## 3. Configure Theme (CSS Variables)
Add to your global CSS file:

\`\`\`css
@theme {
  --radius-ele: 0.8rem;
  --radius-card: 1rem;
  --color-background: hsl(0, 0%, 100%);
  --color-foreground: hsl(0, 0%, 14%);
  --color-card: hsl(0, 0%, 99%);
  --color-card-foreground: hsl(0, 0%, 14%);
  --color-primary: hsl(235, 100%, 60%);
  --color-primary-foreground: hsl(0, 0%, 98%);
  --color-secondary: hsl(0, 0%, 97%);
  --color-secondary-foreground: hsl(0, 0%, 20%);
  --color-muted: hsl(0, 0%, 97%);
  --color-muted-foreground: hsl(0, 0%, 56%);
  --color-accent: hsl(0, 0%, 96%);
  --color-accent-foreground: hsl(0, 0%, 20%);
  --color-destructive: hsl(9, 96%, 47%);
  --color-destructive-foreground: hsl(0, 0%, 98%);
  --color-border: hsl(0, 0%, 92%);
  --color-input: hsl(0, 0%, 100%);
  --color-ring: hsl(0, 0%, 71%);
}
\`\`\`

## 4. Usage in Components
Components are designed to work seamlessly with the minimalistic design philosophy:
- Clean layouts with generous spacing
- Subtle shadows and borders
- Consistent typography hierarchy
- Accessible color contrasts
`
  }
  // We can add more design types here in the future
};

// Helper function to get UI components for a specific design type
export const getUIComponentsForDesign = (designId) => {
  return UI_COMPONENTS_DATA[designId] || null;
};

// Helper function to get all available design types with UI components
export const getAvailableDesignTypes = () => {
  return Object.keys(UI_COMPONENTS_DATA);
};

// Helper function to generate component installation instructions
export const generateInstallationInstructions = (designId) => {
  const designData = UI_COMPONENTS_DATA[designId];
  if (!designData) return '';

  const components = designData.components;
  const dependencies = [...new Set(components.map(c => c.installation.dependencies))];
  const cliCommands = components.map(c => c.installation.cli);

  return `# Installation Instructions for ${designData.designName}

## Install Dependencies
\`\`\`bash
${dependencies.join('\n')}
\`\`\`

## Install UI Components
\`\`\`bash
${cliCommands.join('\n')}
\`\`\`

${designData.setupInstructions}
`;
};

// Helper function to generate component usage examples
export const generateComponentExamples = (designId) => {
  const designData = UI_COMPONENTS_DATA[designId];
  if (!designData) return '';

  let examples = `# ${designData.designName} - Component Examples\n\n`;
  
  designData.components.forEach(component => {
    examples += `## ${component.name} Component\n\n`;
    examples += `${component.description}\n\n`;
    examples += `### Import\n\`\`\`tsx\n${component.usage}\n\`\`\`\n\n`;
    
    if (component.variants) {
      examples += `### Variants\n${component.variants.map(v => `- ${v}`).join('\n')}\n\n`;
    }
    
    if (component.sizes) {
      examples += `### Sizes\n${component.sizes.map(s => `- ${s}`).join('\n')}\n\n`;
    }
    
    examples += `### Examples\n\n`;
    component.examples.forEach(example => {
      examples += `#### ${example.name}\n\`\`\`tsx\n${example.code}\n\`\`\`\n\n`;
    });
    
    examples += `---\n\n`;
  });
  
  return examples;
};

// Helper function to generate complete component content for cursor rules
export const generateCompleteComponentContent = (designId) => {
  const designData = UI_COMPONENTS_DATA[designId];
  if (!designData) return '';

  let content = `# ${designData.designName} - UI Components\n\n`;
  content += `UI Library: ${designData.uiLibrary} (https://www.hextaui.com/)\n\n`;
  content += `---\n\n`;
  
  // Add each component's full content
  designData.components.forEach(component => {
    if (component.fullContent) {
      content += `${component.fullContent}\n\n---\n\n`;
    }
  });
  
  // Add theming content
  if (designData.themingContent) {
    content += `${designData.themingContent}\n\n`;
  }
  
  return content;
}; 