import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { generatePromptForFeature } from '../services/promptGeneratorService';
import { Copy, Check, Zap, AlertCircle } from 'lucide-react';

const AutoGeneratedPrompts = ({ project }) => {
  const availableFeatures = project.features || project.selectedFeatures || [];
  const [prompts, setPrompts] = useState({});
  const [loadingFeatures, setLoadingFeatures] = useState(new Set());
  const [copiedPrompts, setCopiedPrompts] = useState(new Set());
  const [errors, setErrors] = useState({});

  // Load existing prompts from localStorage and generate missing ones
  useEffect(() => {
    const loadAndGeneratePrompts = async () => {
      let currentPrompts = {};
      
      // Load existing prompts from localStorage
      if (project?.id) {
        const existingPrompts = JSON.parse(localStorage.getItem(`prompts_${project.id}`) || '[]');
        existingPrompts.forEach(prompt => {
          currentPrompts[prompt.feature] = prompt.content;
        });
        
        if (Object.keys(currentPrompts).length > 0) {
          setPrompts(currentPrompts);
        }
      }

      // Generate prompts for features that don't have them yet
      const existingFeatures = Object.keys(currentPrompts);
      const missingFeatures = availableFeatures.filter(feature => !existingFeatures.includes(feature));
      
      for (const feature of missingFeatures) {
        await generatePromptForSelectedFeature(feature);
      }
    };

    if (availableFeatures.length > 0) {
      loadAndGeneratePrompts();
    }
  }, [availableFeatures, project]);

  const generatePromptForSelectedFeature = async (featureName) => {
    setLoadingFeatures(prev => new Set([...prev, featureName]));
    setErrors(prev => ({ ...prev, [featureName]: null }));

    try {
      const prompt = await generatePromptForFeature(featureName, project);
      setPrompts(prev => ({ ...prev, [featureName]: prompt }));
      
      // Save to localStorage for download functionality
      if (project?.id) {
        const existingPrompts = JSON.parse(localStorage.getItem(`prompts_${project.id}`) || '[]');
        const promptData = {
          feature: featureName,
          content: prompt,
          createdAt: new Date().toISOString()
        };
        
        // Remove existing prompt for this feature and add the new one
        const filteredPrompts = existingPrompts.filter(p => p.feature !== featureName);
        const updatedPrompts = [...filteredPrompts, promptData];
        
        localStorage.setItem(`prompts_${project.id}`, JSON.stringify(updatedPrompts));
      }
    } catch (error) {
      console.error(`Failed to generate prompt for ${featureName}:`, error);
      setErrors(prev => ({ 
        ...prev, 
        [featureName]: 'Failed to generate prompt. Please check your API key or try again later.' 
      }));
    } finally {
      setLoadingFeatures(prev => {
        const newSet = new Set(prev);
        newSet.delete(featureName);
        return newSet;
      });
    }
  };

  const copyToClipboard = async (featureName, prompt) => {
    try {
      await navigator.clipboard.writeText(prompt);
      setCopiedPrompts(prev => new Set([...prev, featureName]));
      setTimeout(() => {
        setCopiedPrompts(prev => {
          const newSet = new Set(prev);
          newSet.delete(featureName);
          return newSet;
        });
      }, 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const retryGeneration = (featureName) => {
    generatePromptForSelectedFeature(featureName);
  };

  if (availableFeatures.length === 0) {
    return (
      <div className="flex items-center justify-center h-full text-center p-6">
        <div>
          <Zap className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h4 className="text-lg font-semibold text-gray-700 mb-2">No Features Available</h4>
          <p className="text-sm text-gray-500">Add some features to your project to generate prompts.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full overflow-y-auto">
      <div className="space-y-6 p-2">
        {availableFeatures.map((feature, index) => {
          const isLoading = loadingFeatures.has(feature);
          const prompt = prompts[feature];
          const error = errors[feature];
          const isCopied = copiedPrompts.has(feature);

          return (
            <motion.div
              key={feature}
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
              className="group relative bg-white rounded-2xl border border-gray-100 shadow-sm hover:shadow-xl hover:border-gray-200 transition-all duration-300 overflow-hidden"
            >
              {/* Subtle gradient background */}
              <div className="absolute inset-0 bg-gradient-to-br from-white to-gray-50/30 opacity-60" />
              
              {/* Feature Header */}
              <div className="relative flex items-center justify-between p-6 border-b border-gray-50">
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-blue-500 rounded-full opacity-80" />
                  <h4 className="font-semibold text-gray-900 text-base tracking-tight">{feature}</h4>
                </div>
                {prompt && (
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => copyToClipboard(feature, prompt)}
                    className="flex items-center space-x-2 px-4 py-2 bg-gray-900 text-white rounded-xl hover:bg-black transition-colors duration-200 shadow-sm text-sm font-medium"
                    title="Copy prompt"
                  >
                    {isCopied ? (
                      <>
                        <Check className="w-4 h-4" />
                        <span>Copied!</span>
                      </>
                    ) : (
                      <>
                        <Copy className="w-4 h-4" />
                        <span>Copy</span>
                      </>
                    )}
                  </motion.button>
                )}
              </div>

              {/* Content */}
              <div className="relative p-6 min-h-[200px]">
                {isLoading ? (
                  <div className="flex flex-col items-center justify-center py-16">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1.2, repeat: Infinity, ease: "linear" }}
                      className="w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full mb-4"
                    />
                    <span className="text-sm text-gray-600 font-medium">Generating prompt...</span>
                    <span className="text-xs text-gray-400 mt-1">This may take a few seconds</span>
                  </div>
                ) : error ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <div className="flex items-center justify-center w-12 h-12 bg-red-50 rounded-full mb-4">
                      <AlertCircle className="w-6 h-6 text-red-500" />
                    </div>
                    <span className="text-sm text-red-600 mb-4 text-center">{error}</span>
                    <button
                      onClick={() => retryGeneration(feature)}
                      className="px-6 py-2 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-colors text-sm font-medium shadow-sm"
                    >
                      Try Again
                    </button>
                  </div>
                ) : prompt ? (
                  <div className="space-y-4">
                    <div className="relative bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-xl p-5 border border-gray-100">
                      <div className="absolute top-3 right-3 opacity-30">
                        <Copy className="w-4 h-4 text-gray-400" />
                      </div>
                      <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono leading-relaxed max-h-48 overflow-y-auto pr-8 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent">
                        {prompt}
                      </pre>
                    </div>
                    {isCopied && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.8, y: 10 }}
                        animate={{ opacity: 1, scale: 1, y: 0 }}
                        exit={{ opacity: 0, scale: 0.8, y: -10 }}
                        className="flex items-center justify-center space-x-2 text-sm text-green-600 bg-green-50 py-2 px-4 rounded-lg border border-green-100"
                      >
                        <Check className="w-4 h-4" />
                        <span className="font-medium">Successfully copied to clipboard</span>
                      </motion.div>
                    )}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-16">
                    <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                      <Zap className="w-6 h-6 text-gray-400" />
                    </div>
                    <span className="text-sm text-gray-500">Waiting to generate...</span>
                  </div>
                )}
              </div>

              {/* Bottom accent line */}
              <div className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 to-purple-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            </motion.div>
          );
        })}
      </div>
      
      {/* Enhanced Summary Footer */}
      <div className="mt-8 mx-2 mb-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="bg-gradient-to-r from-gray-50 to-white rounded-2xl p-6 border border-gray-100 shadow-sm"
        >
          <div className="flex items-center justify-center space-x-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-900">
                {Object.keys(prompts).length}
              </div>
              <div className="text-xs text-gray-500 uppercase tracking-wide font-medium">
                Generated
              </div>
            </div>
            <div className="w-px h-8 bg-gray-200" />
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-900">
                {availableFeatures.length}
              </div>
              <div className="text-xs text-gray-500 uppercase tracking-wide font-medium">
                Total Features
              </div>
            </div>
            {loadingFeatures.size > 0 && (
              <>
                <div className="w-px h-8 bg-gray-200" />
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-2">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full"
                    />
                    <span className="text-sm text-blue-600 font-medium">
                      {loadingFeatures.size} generating...
                    </span>
                  </div>
                </div>
              </>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default AutoGeneratedPrompts; 