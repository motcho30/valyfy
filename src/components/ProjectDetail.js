import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import PRDSection from './PRDSection';
import DesignSpec from './DesignSpec';
import FilesGuidance from './FilesGuidance';
import DesignReview from './DesignReview';
import ProductManagerTab from './ProductManagerTab';
import ProjectSidebar from './ProjectSidebar';
import { generatePromptForFeature } from '../services/promptGeneratorService';
import { useProjectFiles } from '../hooks/useProjectFiles';
import { Check, Copy, Zap, History, GripVertical, Palette, ArrowRight, Plus, Bot, AlertTriangle, Users, Download, RefreshCw, CheckSquare } from 'lucide-react';
import CursorTips from './CursorTips';
import { generateDesignSpecDocument } from '../services/designSpecService';
import { generateTaskList } from '../services/taskListService';
import AutoGeneratedPrompts from './AutoGeneratedPrompts';
import TaskListGenerator from './TaskListGenerator';

const DownloadPromptsButton = ({ project }) => {
  const [isDownloading, setIsDownloading] = React.useState(false);

  const downloadAllPrompts = async () => {
    setIsDownloading(true);
    
    try {
      // Get stored prompts from localStorage (if any) or fetch from database
      const storedPrompts = JSON.parse(localStorage.getItem(`prompts_${project.id}`) || '[]');
      
      // Also try to fetch from database if it's a Supabase project
      let allPrompts = [];
      
      if (!project.id.toString().startsWith('local-')) {
        try {
          const { db } = await import('../services/supabase');
          const { data: files } = await db.getProjectFiles(project.id);
          const promptFiles = files?.filter(f => f.file_type === 'Prompt Template') || [];
          
          allPrompts = promptFiles.map(f => ({
            feature: f.metadata?.feature || f.name.replace('-prompt.md', '').replace(/-/g, ' '),
            content: f.file_content || f.content,
            createdAt: f.created_at
          }));
        } catch (error) {
          console.error('Error fetching prompts from database:', error);
        }
      }
      
      // Combine stored and database prompts, removing duplicates
      const combinedPrompts = [...storedPrompts];
      allPrompts.forEach(dbPrompt => {
        if (!combinedPrompts.find(p => p.feature === dbPrompt.feature)) {
          combinedPrompts.push(dbPrompt);
        }
      });

      if (combinedPrompts.length === 0) {
        alert('No prompts available to download. Generate some prompts first!');
        return;
      }

      // Format prompts into a markdown document
      const projectFeatures = project.features || project.selectedFeatures || [];
      const currentDate = new Date().toLocaleDateString();
      
      let markdownContent = `# ${project.name} - Prompt Templates\n\n`;
      markdownContent += `**Project Type:** ${project.type}\n`;
      markdownContent += `**Framework:** ${project.framework || 'Not specified'}\n`;
      markdownContent += `**Generated:** ${currentDate}\n`;
      markdownContent += `**Total Features:** ${projectFeatures.length}\n`;
      markdownContent += `**Generated Prompts:** ${combinedPrompts.length}\n\n`;
      markdownContent += `---\n\n`;
      
      markdownContent += `## Project Description\n\n${project.description}\n\n`;
      markdownContent += `---\n\n`;

      // Add each prompt
      combinedPrompts.forEach((prompt, index) => {
        markdownContent += `## ${index + 1}. ${prompt.feature}\n\n`;
        markdownContent += `\`\`\`\n${prompt.content}\n\`\`\`\n\n`;
        markdownContent += `---\n\n`;
      });

      // Add footer
      markdownContent += `## Usage Instructions\n\n`;
      markdownContent += `1. Copy the desired prompt from above\n`;
      markdownContent += `2. Paste it into your AI coding assistant (Cursor, GitHub Copilot, etc.)\n`;
      markdownContent += `3. Customize the prompt as needed for your specific requirements\n`;
      markdownContent += `4. Use the prompt to implement the feature in your project\n\n`;
      markdownContent += `*Generated with Landing Page Builder - AI-Powered Development*`;

      // Create and download file
      const blob = new Blob([markdownContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${project.name.replace(/\s+/g, '-')}-prompt-templates.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('Error downloading prompts:', error);
      alert('Error downloading prompts. Please try again.');
    } finally {
      setIsDownloading(false);
    }
  };

  return (
    <button
      onClick={downloadAllPrompts}
      disabled={isDownloading}
      className="p-1 text-gray-500 hover:text-gray-700 transition-colors disabled:opacity-50"
      title="Download all prompts"
    >
      {isDownloading ? (
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full"
        />
      ) : (
        <Download className="w-4 h-4" />
      )}
    </button>
  );
};

const AddFeatureModal = ({ isOpen, onClose, newFeatureName, setNewFeatureName, onAddFeature }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-2xl p-8 shadow-xl w-full max-w-md"
        onClick={e => e.stopPropagation()}
      >
        <h3 className="text-xl font-semibold text-gray-900 mb-2">Add new feature</h3>
        <p className="text-sm text-gray-600 mb-6">
          Insert a feature, page, or development stage to generate a prompt for.
        </p>
        <input
          type="text"
          value={newFeatureName}
          onChange={(e) => setNewFeatureName(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && onAddFeature()}
          placeholder="e.g. User Authentication"
          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none transition"
          autoFocus
        />
        <div className="flex justify-end space-x-3 mt-6">
          <button onClick={onClose} className="px-5 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition font-medium">
            Cancel
          </button>
          <button onClick={onAddFeature} className="px-5 py-2 text-white bg-gray-800 rounded-lg hover:bg-black transition font-semibold">
            Add & Generate
          </button>
        </div>
      </motion.div>
    </div>
  );
};

const ProjectDetail = ({ project, onClose, onGenerateFile, onDesignUpdate, onNavigateToFeature, showGuidanceOnLoad = false }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [fileContents, setFileContents] = useState({});
  const [loadingFiles, setLoadingFiles] = useState(false);
  const [activeModal, setActiveModal] = useState(null);
  const [showOnboarding, setShowOnboarding] = useState(showGuidanceOnLoad);
  const [copyFeedback, setCopyFeedback] = useState({});
  const [showVideoModal, setShowVideoModal] = useState(false);

  const loadFileContent = async (fileId, fileType) => {
    if (fileContents[fileId]) return fileContents[fileId];
    
    try {
      setLoadingFiles(true);
      
      const isSupabaseProject = !project.id.toString().startsWith('local-');
      
      if (isSupabaseProject) {
        const { db } = await import('../services/supabase');
        const { data: files } = await db.getProjectFiles(project.id);
        const file = files?.find(f => f.file_type === fileType);
        
        if (file?.file_content) {
          setFileContents(prev => ({ ...prev, [fileId]: file.file_content }));
          return file.file_content;
        }
      }
      
      return null;
    } catch (error) {
      console.error('Error loading file content:', error);
      return null;
    } finally {
      setLoadingFiles(false);
    }
  };

  const generatedFiles = {
    prd: project.generatedFiles?.find(f => f.type === 'PRD Document')?.content || 
         fileContents[project.generatedFiles?.find(f => f.type === 'PRD Document')?.id] || null,
    features: project.generatedFiles?.find(f => f.type === 'Analysis Report')?.content || 
              fileContents[project.generatedFiles?.find(f => f.type === 'Analysis Report')?.id] || null,
    tutorial: project.generatedFiles?.find(f => f.type === 'Tutorial')?.content || 
              fileContents[project.generatedFiles?.find(f => f.type === 'Tutorial')?.id] || null,
  };
  
  useEffect(() => {
    const loadAllFileContents = async () => {
      if (!project.generatedFiles?.length) return;
      
      const isSupabaseProject = !project.id.toString().startsWith('local-');
      if (!isSupabaseProject) return;
      
      try {
        const { db } = await import('../services/supabase');
        const { data: files } = await db.getProjectFiles(project.id);
        
        if (files?.length) {
          const contents = {};
          files.forEach(file => {
            if (file.file_content) {
              contents[file.id] = file.file_content;
            }
          });
          setFileContents(contents);
        }
      } catch (error) {
        console.error('Error loading file contents:', error);
      }
    };
    
    loadAllFileContents();
  }, [project.id, project.generatedFiles]);



  const handlePRDUpdate = (updatedContent) => {
    console.log('PRD updated:', updatedContent);
  };

  // Function to get cursor rules content based on project type
  const getCursorRulesContent = () => {
    const projectType = project?.type;
    if (projectType === 'Web App') {
      return `# PROJECT CONSTITUTION: Next.js & Tailwind CSS Web Application

You are an expert full-stack developer specializing in Next.js (App Router) and Tailwind CSS.

## General Principles

• Follow the user's requirements carefully & to the letter.
• First think step-by-step - describe your plan for what to build in pseudocode.
• Confirm, then write code!
• Always write correct, best practice, DRY principle, bug free, fully functional and working code.
• Focus on easy and readable code, over being performant.
• Fully implement all requested functionality.
• Leave NO todo's, placeholders or missing pieces.
• Ensure code is complete! Verify thoroughly finalized.

## Core Architecture

- **Server Components by Default**: All components are Server Components unless they explicitly require interactivity.
- **'use client' Directive**: Only add when component MUST use client-side hooks or event handlers.
- **Keep Client Components at the Leaves**: Client Components should be as small and specific as possible.

## Styling with Tailwind CSS

- **Utility-First Purity**: All styling MUST be done using Tailwind CSS utility classes directly in the JSX.
- **No @apply**: Do not use the @apply directive in a global CSS file.
- **Class Ordering**: All Tailwind classes must be automatically sorted using eslint-plugin-tailwindcss.

## Data Fetching & State Management

- **Primary Data Fetching**: Use async Server Components with fetch directly within the component.
- **Client-Side Data**: Use TanStack Query (React Query) for client-side data fetching and mutations.
- **Client State**: Use useState for component-local state, Zustand for global client state.

## Performance & SEO

- **Image Optimization**: Use the Image component from next/image for all images.
- **Font Optimization**: Use next/font to load and self-host web fonts.
- **Metadata**: Every page MUST export either a static metadata object or a dynamic generateMetadata function.
- **Linking**: Use the Link component from next/link for all internal navigation.

## Project Structure & Naming

- **File Placement**: Adhere strictly to the project structure. Place new pages in app/, reusable components in components/, and utility functions in lib/.
- **File Naming**: Use kebab-case for all files and folders.
- **Component Naming**: Use PascalCase for React components.`;
    } else if (projectType === 'Mobile App') {
      return `# PROJECT CONSTITUTION: React Native & Expo Mobile Application

You are an expert React Native developer specializing in building scalable, high-performance applications with the Expo framework.

## Core Principles & Tooling

- **TypeScript First**: All code must be written in TypeScript with strict mode enabled.
- **ESLint Enforcement**: Adhere to all rules defined in the project's ESLint configuration.
- **Performance First**: Optimize for mobile performance, including bundle size and runtime efficiency.

## Component Architecture

- **Functional Components**: Use functional components with hooks exclusively.
- **Custom Hooks**: Extract reusable logic into custom hooks.
- **Component Composition**: Prefer composition over inheritance.

## State Management

- **Local State**: Use useState for component-local state.
- **Global State**: Use Zustand or Redux Toolkit for global state management.
- **Async State**: Use React Query for server state management.

## Navigation

- **React Navigation**: Use React Navigation v6+ for all navigation.
- **Type Safety**: Implement proper TypeScript types for navigation parameters.
- **Deep Linking**: Configure deep linking for better user experience.

## Styling

- **StyleSheet API**: Use StyleSheet.create for all styles.
- **Responsive Design**: Implement responsive design using Dimensions API.
- **Theme System**: Use a consistent theme system for colors, spacing, and typography.`;
    } else {
      return `# PROJECT CONSTITUTION: General Development Guidelines

You are an expert developer specializing in building scalable, high-performance applications.

## General Principles

• Follow the user's requirements carefully & to the letter.
• First think step-by-step - describe your plan for what to build in pseudocode.
• Confirm, then write code!
• Always write correct, best practice, DRY principle, bug free, fully functional and working code.
• Focus on easy and readable code, over being performant.
• Fully implement all requested functionality.
• Leave NO todo's, placeholders or missing pieces.
• Ensure code is complete! Verify thoroughly finalized.

## Code Quality Standards

- **Type Safety**: Use TypeScript where possible for better type safety.
- **Code Style**: Follow consistent naming conventions and code formatting.
- **Documentation**: Include clear comments and documentation for complex logic.
- **Testing**: Write unit tests for critical functionality.
- **Performance**: Optimize for performance and user experience.`;
    }
  };

  const openModal = (modalType) => {
    setActiveModal(modalType);
  };

  const closeModal = () => {
    setActiveModal(null);
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return <ProjectOverview project={project} generatedFiles={generatedFiles} setActiveTab={setActiveTab} onOpenModal={openModal} onGenerateFile={onGenerateFile} loadFileContent={loadFileContent} onShowOnboarding={() => setShowOnboarding(true)} setShowVideoModal={setShowVideoModal} />;
      case 'prompt-templates':
        return <ProjectPromptTemplates project={project} availableFeatures={project.features || project.selectedFeatures || []} />;
      case 'design-review':
        return <DesignReview project={project} />;
      case 'product-manager':
        return <ProductManagerTab project={project} />;
      case 'cursor-tips':
        return <CursorTips />;
      default:
        return null;
    }
  };

  const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;

    return (
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" onClick={onClose}>
        <motion.div initial={{ scale: 0.95, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0.95, opacity: 0 }} className="bg-white rounded-2xl max-w-6xl max-h-[90vh] overflow-hidden shadow-xl" onClick={(e) => e.stopPropagation()}>
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <h2 className="text-2xl font-semibold text-gray-900">{title}</h2>
            <button onClick={onClose} className="text-gray-400 hover:text-gray-600 transition-colors"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /></svg></button>
          </div>
          <div className="overflow-y-auto max-h-[calc(90vh-80px)]">{children}</div>
        </motion.div>
      </motion.div>
    );
  };

  return (
    <div className="h-screen bg-white flex overflow-hidden">
      <ProjectSidebar
        project={project}
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        onClose={onClose}
      />
      <div className="flex-1 overflow-y-auto">
        <motion.div key={activeTab} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }} className="h-full">
          {renderTabContent()}
        </motion.div>
      </div>
      
      {/* Modals */}
      <>
        <Modal isOpen={activeModal === 'prd'} onClose={closeModal} title="Product Requirements Document">
          <div className="p-8">
            {loadingFiles ? (
              <div className="flex items-center justify-center py-20">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-slate-900"></div>
                <span className="ml-3 text-slate-600">Loading PRD content...</span>
              </div>
            ) : generatedFiles.prd ? (
              <PRDSection content={generatedFiles.prd} project={project} onDownload={() => console.log('PRD downloaded')} onUpdate={handlePRDUpdate} />
            ) : (
              <EmptyState
                title="No PRD Generated"
                description="Generate a PRD to get started with your project requirements."
                icon="target"
                onGenerate={() => onGenerateFile('prd')}
              />
            )}
          </div>
        </Modal>

        <Modal isOpen={activeModal === 'design-spec'} onClose={closeModal} title="Design Specifications">
          <div className="p-8">
            <DesignSpec project={project} onUpdate={onDesignUpdate} />
          </div>
        </Modal>

        <Modal isOpen={activeModal === 'project-context'} onClose={closeModal} title="Project Context">
          <div className="p-8 space-y-10">
            {/* PRD Section */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-4">Product Requirements Document</h3>
              {loadingFiles ? (
                <div className="flex items-center justify-center py-10">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-900"></div>
                  <span className="ml-3 text-slate-600">Loading PRD content...</span>
                </div>
              ) : generatedFiles.prd ? (
                <PRDSection content={generatedFiles.prd} project={project} onDownload={() => console.log('PRD downloaded')} onUpdate={handlePRDUpdate} />
              ) : (
                <div className="bg-gray-50 rounded-lg p-6 text-center">
                  <p className="text-gray-600 mb-4">No PRD generated yet</p>
                  <button 
                    onClick={() => onGenerateFile('prd')}
                    className="text-blue-600 hover:text-blue-700 font-medium hover:underline transition-all duration-200"
                  >
                    Generate PRD
                  </button>
                </div>
              )}
            </div>

            {/* Design Spec Section */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-4">Design Specifications</h3>
              <DesignSpec project={project} onUpdate={onDesignUpdate} />
            </div>

            {/* Cursor Rules Section */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-4">Cursor AI Development Rules</h3>
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="prose prose-sm max-w-none">
                  <pre className="whitespace-pre-wrap text-sm text-gray-700 font-mono bg-white p-4 rounded border">
                    {getCursorRulesContent()}
                  </pre>
                </div>
              </div>
            </div>
          </div>
        </Modal>
      </>
      
      {/* Video Demo Modal */}
      {showVideoModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">How to Use Your Project Files</h3>
              <button
                onClick={() => setShowVideoModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors duration-200"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-6">
              <video
                controls
                className="w-full h-auto rounded-xl"
                autoPlay={false}
              >
                <source src="/demoforprojectcontext.mov" type="video/quicktime" />
                <source src="/demoforprojectcontext.mov" type="video/mp4" />
                Your browser does not support the video tag.
              </video>
            </div>
          </div>
        </div>
      )}
      
      {/* Onboarding Overlay */}
      {showOnboarding && (
        <div className="fixed inset-0 z-50">
          <FilesGuidance
            project={project}
            onClose={() => setShowOnboarding(false)}
            onComplete={() => {
              setShowOnboarding(false);
              setActiveTab('overview');
            }}
          />
        </div>
      )}
    </div>
  );
};

const ProjectOverview = ({ project, generatedFiles, setActiveTab, onOpenModal, onGenerateFile, loadFileContent, onShowOnboarding, setShowVideoModal }) => {
  // Task list state
  const [taskList, setTaskList] = useState('');
  const [isGeneratingTasks, setIsGeneratingTasks] = useState(false);
  const [taskError, setTaskError] = useState(null);
  const [copyFeedback, setCopyFeedback] = useState({});

  // Simple cursor rules content
  const getCursorRulesContent = () => {
    const projectType = project?.type;
    if (projectType === 'Web App') {
      return `# PROJECT CONSTITUTION: Next.js & Tailwind CSS Web Application

You are an expert full-stack developer specializing in Next.js (App Router) and Tailwind CSS.

## General Principles

• Follow the user's requirements carefully & to the letter.
• First think step-by-step - describe your plan for what to build in pseudocode.
• Confirm, then write code!
• Always write correct, best practice, DRY principle, bug free, fully functional and working code.
• Focus on easy and readable code, over being performant.
• Fully implement all requested functionality.
• Leave NO todo's, placeholders or missing pieces.
• Ensure code is complete! Verify thoroughly finalized.

## Core Architecture

- **Server Components by Default**: All components are Server Components unless they explicitly require interactivity.
- **'use client' Directive**: Only add when component MUST use client-side hooks or event handlers.
- **Keep Client Components at the Leaves**: Client Components should be as small and specific as possible.

## Styling with Tailwind CSS

- **Utility-First Purity**: All styling MUST be done using Tailwind CSS utility classes directly in the JSX.
- **No @apply**: Do not use the @apply directive in a global CSS file.
- **Class Ordering**: All Tailwind classes must be automatically sorted using eslint-plugin-tailwindcss.

## Data Fetching & State Management

- **Primary Data Fetching**: Use async Server Components with fetch directly within the component.
- **Client-Side Data**: Use TanStack Query (React Query) for client-side data fetching and mutations.
- **Client State**: Use useState for component-local state, Zustand for global client state.

## Performance & SEO

- **Image Optimization**: Use the Image component from next/image for all images.
- **Font Optimization**: Use next/font to load and self-host web fonts.
- **Metadata**: Every page MUST export either a static metadata object or a dynamic generateMetadata function.
- **Linking**: Use the Link component from next/link for all internal navigation.

## Project Structure & Naming

- **File Placement**: Adhere strictly to the project structure. Place new pages in app/, reusable components in components/, and utility functions in lib/.
- **File Naming**: Use kebab-case for all files and folders.
- **Component Naming**: Use PascalCase for React components.`;
    } else if (projectType === 'Mobile App') {
      return `# PROJECT CONSTITUTION: React Native & Expo Mobile Application

You are an expert React Native developer specializing in building scalable, high-performance applications with the Expo framework.

## Core Principles & Tooling

- **TypeScript First**: All code must be written in TypeScript with strict mode enabled.
- **ESLint Enforcement**: Adhere to all rules defined in the project's ESLint configuration.
- **Performance First**: Optimize for mobile performance, including bundle size and runtime efficiency.

## Component Architecture

- **Functional Components**: Use functional components with hooks exclusively.
- **Custom Hooks**: Extract reusable logic into custom hooks.
- **Component Composition**: Prefer composition over inheritance.

## State Management

- **Local State**: Use useState for component-local state.
- **Global State**: Use Zustand or Redux Toolkit for global state management.
- **Async State**: Use React Query for server state management.

## Navigation

- **React Navigation**: Use React Navigation v6+ for all navigation.
- **Type Safety**: Implement proper TypeScript types for navigation parameters.
- **Deep Linking**: Configure deep linking for better user experience.

## Styling

- **StyleSheet API**: Use StyleSheet.create for all styles.
- **Responsive Design**: Implement responsive design using Dimensions API.
- **Theme System**: Use a consistent theme system for colors, spacing, and typography.`;
    } else {
      return `# PROJECT CONSTITUTION: General Development Guidelines

You are an expert developer specializing in building scalable, high-performance applications.

## General Principles

• Follow the user's requirements carefully & to the letter.
• First think step-by-step - describe your plan for what to build in pseudocode.
• Confirm, then write code!
• Always write correct, best practice, DRY principle, bug free, fully functional and working code.
• Focus on easy and readable code, over being performant.
• Fully implement all requested functionality.
• Leave NO todo's, placeholders or missing pieces.
• Ensure code is complete! Verify thoroughly finalized.

## Code Quality Standards

- **Type Safety**: Use TypeScript where possible for better type safety.
- **Code Style**: Follow consistent naming conventions and code formatting.
- **Documentation**: Include clear comments and documentation for complex logic.
- **Testing**: Write unit tests for critical functionality.
- **Performance**: Optimize for performance and user experience.`;
    }
  };

  // Load or generate task list on component mount
  useEffect(() => {
    const loadOrGenerateTaskList = async () => {
      if (project?.id) {
        const existingTaskList = localStorage.getItem(`taskList_${project.id}`);
        if (existingTaskList) {
          setTaskList(existingTaskList);
          return;
        }
      }
      // Generate new task list if none exists
      await generateNewTaskList();
    };

    if (project) {
      loadOrGenerateTaskList();
    }
  }, [project]);

  const generateNewTaskList = async () => {
    setIsGeneratingTasks(true);
    setTaskError(null);

    try {
      const generatedTaskList = await generateTaskList(project);
      setTaskList(generatedTaskList);
      
      // Save to localStorage
      if (project?.id) {
        localStorage.setItem(`taskList_${project.id}`, generatedTaskList);
      }
    } catch (error) {
      console.error('Error generating task list:', error);
      setTaskError(error.message);
    } finally {
      setIsGeneratingTasks(false);
    }
  };

  // Parse task list to extract tasks for display
  const parseTaskListForDisplay = () => {
    if (!taskList) return [];
    
    const lines = taskList.split('\n');
    const tasks = [];
    
    lines.forEach(line => {
      const trimmedLine = line.trim();
      if (trimmedLine.startsWith('- [ ]') || trimmedLine.startsWith('- [x]')) {
        const isCompleted = trimmedLine.startsWith('- [x]');
        const taskText = trimmedLine.replace(/^- \[[x ]\]\s*/, '');
        tasks.push({ text: taskText, completed: isCompleted });
      }
    });
    
    return tasks.slice(0, 8); // Show first 8 tasks
  };

  const displayTasks = parseTaskListForDisplay();

  // Download handlers for individual files
  const handleDownloadPRD = () => {
    const prdFile = project.generatedFiles?.find(f => f.type === 'PRD Document');
    if (prdFile?.content) {
      const blob = new Blob([prdFile.content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${project.name.replace(/\s+/g, '-')}-prd.md`;
      a.click();
      URL.revokeObjectURL(url);
    }
  };

  const handleDownloadDesignSpecs = () => {
    if (project?.selectedDesign?.prompt) {
      const designSpecContent = `# Design Specification Document
## ${project.name}

### Design Theme: ${project.selectedDesign.name}
${project.selectedDesign.description || ''}

---

${project.selectedDesign.prompt}`;
      
      const blob = new Blob([designSpecContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${project.name.replace(/\s+/g, '-')}-design-specs.md`;
      a.click();
      URL.revokeObjectURL(url);
    }
  };

  // Download combined Project Context (PRD + Design Spec + Cursor Rules)
  const handleDownloadProjectContext = async () => {
    try {
      // Get PRD content
      const prdFile = project.generatedFiles?.find(f => f.type === 'PRD Document');
      const prdContent = prdFile?.content || 'PRD not generated yet.';
      
      let combinedContent = prdContent;
      
      // Generate cursor rules section based on project type
      const getCursorRulesSection = () => {
        const projectType = project?.type;
        
        if (projectType === 'Web App') {
          return `# PROJECT CONSTITUTION: Next.js & Tailwind CSS Web Application

You are an expert full-stack developer specializing in Next.js (App Router) and Tailwind CSS. Your code must be performant, scalable, SEO-friendly, and strictly adhere to the modern architectural patterns outlined below.

## General Principles

• Follow the user's requirements carefully & to the letter.
• First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
• Confirm, then write code!
• Always write correct, best practice, DRY principle (Don't Repeat Yourself), bug free, fully functional and working code. It should also be aligned to listed rules below at Code Implementation Guidelines.
• Focus on easy and readable code, over being performant.
• Fully implement all requested functionality.
• Leave NO todo's, placeholders or missing pieces.
• Ensure code is complete! Verify thoroughly finalized.
• Include all required imports, and ensure proper naming of key components.
• Be concise. Minimize any other prose.
• If you think there might not be a correct answer, say so.
• If you do not know the answer, say so, instead of guessing.

## 1. Core Architecture: Server-First Component Model

- **Server Components by Default**: All components are Server Components unless they explicitly require interactivity or browser-only APIs.
- **\`'use client'\` Directive**: Only add the \`'use client'\` directive at the top of a file if the component MUST use client-side hooks (\`useState\`, \`useEffect\`, \`useContext\`) or event handlers (\`onClick\`, \`onChange\`).
- **Keep Client Components at the Leaves**: Client Components should be as small and specific as possible. They should be "leaves" in the component tree. Fetch data in Server Components and pass it down as props to Client Components. Avoid creating large, monolithic Client Components.

## 2. Styling with Tailwind CSS

- **Utility-First Purity**: All styling MUST be done using Tailwind CSS utility classes directly in the JSX. Do not write custom CSS files or use CSS-in-JS libraries.
- **No \`@apply\`**: Do not use the \`@apply\` directive in a global CSS file. If a combination of classes is frequently reused, create a new React component that encapsulates that pattern. This is more maintainable and composable.
- **Class Ordering**: All Tailwind classes must be automatically sorted using the official \`eslint-plugin-tailwindcss\`. Your generated code must follow this standard ordering (e.g., layout, spacing, typography, colors, etc.).
- **Configuration**: Use the \`tailwind.config.js\` file to extend the theme with custom colors, fonts, or spacing, rather than using arbitrary values in the JSX.

## 3. Data Fetching & State Management

- **Primary Data Fetching**: The primary method for fetching data is in **async Server Components**. Use \`fetch\` directly within the component. Next.js automatically dedupes requests and provides caching capabilities.
- **Client-Side Data**: For client-side data fetching, mutations, and complex caching/revalidation scenarios (e.g., infinite scroll, polling), you MUST use **TanStack Query (React Query)**. Do not use \`useEffect\` with \`fetch\` for this purpose.
- **Client State**:
    - For simple, component-local state, use \`useState\`.
    - For global client state (e.g., shopping cart, UI state), use **Zustand**. Avoid overusing React Context for global state to prevent performance issues.

## 4. Performance & SEO

- **Image Optimization**: You MUST use the \`<Image>\` component from \`next/image\` for all images. This provides automatic optimization, resizing, and lazy loading. Do not use the standard \`<img>\` tag.
- **Font Optimization**: Use \`next/font\` to load and self-host web fonts for optimal performance and to avoid layout shifts.
- **Metadata**: Every page (\`page.tsx\`) MUST export either a static \`metadata\` object or a dynamic \`generateMetadata\` function to define the page title, description, and Open Graph tags for SEO.
- **Linking**: Use the \`<Link>\` component from \`next/link\` for all internal navigation. This enables client-side navigation and prefetching.

## 5. Project Structure & Naming

- **File Placement**: Adhere strictly to the project structure (as defined by the project's architectural guide). Place new pages in \`app/\`, reusable components in \`components/\`, and utility functions in \`lib/\`.
- **File Naming**: Use \`kebab-case\` for all files and folders (e.g., \`user-profile/\`, \`page.tsx\`, \`primary-button.tsx\`).
- **Component Naming**: Use \`PascalCase\` for React components (e.g., \`ServiceSection\`).

## 6. Pre-Deployment QA Checklist

Before any feature is considered complete, you must help verify the following points. When asked to review code, check against this list.

1. **Performance**: Have Lighthouse scores been checked? Are images optimized with \`next/image\`? Is the bundle size reasonable?
2. **SEO**: Does every new page have a unique and descriptive \`metadata\` export?
3. **Accessibility (a11y)**: Are all interactive elements keyboard-navigable? Do images have \`alt\` tags? Are ARIA attributes used correctly?
4. **Responsiveness**: Does the UI adapt correctly to mobile, tablet, and desktop viewports?`;
        } else if (projectType === 'Mobile App') {
          return `# PROJECT CONSTITUTION: React Native & Expo Mobile Application

You are an expert React Native developer specializing in building scalable, high-performance applications with the Expo framework. Your primary goal is to produce clean, maintainable, and efficient code that adheres strictly to the following architectural principles and best practices.

## 1. Core Principles & Tooling

- **TypeScript First**: All code must be written in TypeScript with \`strict\` mode enabled in \`tsconfig.json\`. Avoid using the \`any\` type; prefer explicit types or \`unknown\`.
- **ESLint Enforcement**: Adhere to all rules defined in the project's ESLint configuration, which includes \`eslint-plugin-react-hooks\` and the official Expo ESLint config. Code must be free of ESLint errors and warnings.
- **Naming Conventions**:
    - **Components**: \`PascalCase\` (e.g., \`UserProfile\`, \`PrimaryButton\`).
    - **Functions & Variables**: \`camelCase\` (e.g., \`fetchUserData\`, \`isLoading\`).
    - **Async Functions**: End with \`Async\` where it clarifies that a Promise is returned (e.g., \`saveSettingsAsync\`).
    - **Constants**: \`UPPER_SNAKE_CASE\` (e.g., \`API_BASE_URL\`, \`DEFAULT_PADDING\`).
    - **Directories**: \`kebab-case\` for feature folders (e.g., \`user-profile\`), \`camelCase\` for others.
- **Modularity**: Components and functions should adhere to the Single Responsibility Principle. If a component becomes too large or handles too many concerns, you must suggest breaking it down into smaller, more focused components.

## 2. Project & Directory Structure

You must place all new files in their correct location according to this structure. Ask for clarification if unsure.

- \`src/app/\`: All screens and navigation layouts (Expo Router).
- \`src/components/\`: Shared, reusable UI components. Can be sub-divided (e.g., \`ui/\`, \`forms/\`).
- \`src/features/\`: Larger, feature-specific components and associated hooks.
- \`src/hooks/\`: Global, reusable custom hooks for non-UI logic.
- \`src/state/\`: Global state management stores (e.g., Zustand).
- \`src/api/\`: Data fetching logic, primarily TanStack Query hooks.
- \`src/lib/\` (or \`src/utils/\`): Helper functions, constants, and type definitions.

## 3. Component Design & Styling

- **NativeWind for Styling**: Use NativeWind (Tailwind CSS for React Native) for all styling. This provides a consistent, utility-first approach that matches web development patterns.
- **Component Composition**: Prefer composition over inheritance. Build complex components by combining smaller, focused components.
- **Responsive Design**: Use responsive utilities and consider different screen sizes and orientations.
- **Accessibility**: Implement proper accessibility features including \`accessibilityLabel\`, \`accessibilityHint\`, and \`accessibilityRole\`.

## 4. State Management & Data Fetching

- **TanStack Query**: Use TanStack Query for all server state management, caching, and data fetching operations.
- **Zustand for Client State**: Use Zustand for global client state management (user preferences, UI state, etc.).
- **Local State**: Use \`useState\` and \`useReducer\` for component-local state.
- **Async Operations**: Always handle loading states, error states, and success states appropriately.

## 5. Performance & Optimization

- **Memoization**: Use \`React.memo\`, \`useMemo\`, and \`useCallback\` appropriately to prevent unnecessary re-renders.
- **Image Optimization**: Use Expo's optimized image components and consider lazy loading for large image lists.
- **Bundle Size**: Be mindful of bundle size and avoid unnecessary dependencies.
- **Memory Management**: Properly clean up subscriptions, timers, and event listeners.

## 6. Testing & Quality Assurance

- **Unit Testing**: Write unit tests for utility functions and custom hooks.
- **Component Testing**: Test component behavior and user interactions.
- **Error Boundaries**: Implement error boundaries to gracefully handle runtime errors.
- **Type Safety**: Leverage TypeScript to catch errors at compile time.

## 7. Development Workflow

- **Git Workflow**: Follow conventional commit messages and maintain a clean git history.
- **Code Review**: Ensure all code is reviewed before merging.
- **Documentation**: Document complex logic and provide clear comments where necessary.
- **Performance Monitoring**: Monitor app performance and optimize based on real-world usage data.

## 8. Deployment & Distribution

- **Expo Updates**: Use Expo Updates for over-the-air updates when possible.
- **App Store Guidelines**: Ensure compliance with App Store and Google Play guidelines.
- **Environment Configuration**: Use environment variables for different deployment stages.
- **Analytics**: Implement analytics to track user behavior and app performance.

Remember: Always prioritize user experience, code maintainability, and performance. Write code that is not only functional but also scalable and easy to understand for future developers.`;
        }

        return '';
      };

      // Add cursor rules section
      const cursorRulesSection = getCursorRulesSection();
      if (cursorRulesSection) {
        combinedContent += '\n\n---\n\n' + cursorRulesSection;
      }

      // Add design specification from the selected design's prompt
      if (project?.selectedDesign?.prompt) {
        const designSpecContent = `# Design Specification Document
## ${project.name}

### Design Theme: ${project.selectedDesign.name}
${project.selectedDesign.description || ''}

---

${project.selectedDesign.prompt}`;
        
        combinedContent += '\n\n---\n\n' + designSpecContent;
      }

      const combined = `# Project Context - ${project.name}\n\n${combinedContent}`;

      const blob = new Blob([combined], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${project.name.replace(/\s+/g, '-')}-project-context.md`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading Project Context:', error);
    }
  };

  const storedPrompts = React.useMemo(() => {
    if (!project?.id) return [];
    try {
      return JSON.parse(localStorage.getItem(`prompts_${project.id}`) || '[]');
    } catch { return []; }
  }, [project?.id]);

  // Function to show copy feedback
  const showCopyFeedback = (type) => {
    setCopyFeedback(prev => ({ ...prev, [type]: true }));
    setTimeout(() => {
      setCopyFeedback(prev => ({ ...prev, [type]: false }));
    }, 2000);
  };

  return (
    <div className="w-full bg-white min-h-screen p-8">
      <div className="max-w-7xl mx-auto space-y-12">
        
        {/* Setup Guide - Enhanced */}
        <div className="group bg-white border border-gray-100 rounded-2xl p-8 hover:border-gray-200 hover:shadow-lg transition-all duration-300">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-br from-vibe-cyan/20 to-blue-100 rounded-xl flex items-center justify-center">
                <span className="text-2xl">🚀</span>
              </div>
              <div>
                <h2 className="text-xl font-bold text-gray-900 mb-1">Quick Start Guide</h2>
                <p className="text-gray-600">Get your Cursor AI workspace ready in minutes</p>
              </div>
            </div>
            <button
              onClick={onShowOnboarding}
              className="px-8 py-3 bg-vibe-cyan text-black rounded-xl hover:bg-vibe-cyan/90 transform hover:scale-105 transition-all duration-200 text-sm font-semibold shadow-sm"
            >
              Get Started
            </button>
          </div>
        </div>
        
        {/* Section 1: Your Project files */}
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-8">Your Project files</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            
            {/* PRD Card */}
            <div className="group bg-white border border-gray-100 rounded-2xl p-8 hover:border-gray-200 hover:shadow-lg transition-all duration-300">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-vibe-cyan/20 to-blue-100 rounded-xl flex items-center justify-center">
                    <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900">PRD</h3>
                </div>
              </div>
              <p className="text-gray-600 mb-6 leading-relaxed">
                Product Requirements Document - Comprehensive technical and business requirements for your project
              </p>
              <div className="space-y-3">
                <button 
                  onClick={() => onOpenModal('prd')}
                  className="w-full bg-white border-2 border-vibe-cyan text-gray-900 font-semibold py-3 px-4 rounded-xl hover:bg-vibe-cyan/5 hover:border-vibe-cyan/80 transition-all duration-200 group-hover:scale-[1.02]"
                >
                  View & Edit
                </button>
                <button 
                  onClick={async () => {
                    const prdFile = project.generatedFiles?.find(f => f.type === 'PRD Document');
                    if (prdFile?.content) {
                      try {
                        await navigator.clipboard.writeText(prdFile.content);
                        showCopyFeedback('prd');
                      } catch (error) {
                        console.error('Failed to copy to clipboard:', error);
                      }
                    }
                  }}
                  className={`w-full font-semibold py-3 px-4 rounded-xl transition-all duration-200 group-hover:scale-[1.02] ${
                    copyFeedback.prd 
                      ? 'bg-green-600 text-white' 
                      : 'bg-gray-900 text-white hover:bg-gray-800'
                  }`}
                >
                  {copyFeedback.prd ? '✓ Copied!' : 'Copy'}
                </button>
              </div>
            </div>

            {/* Design specs Card */}
            <div className="group bg-white border border-gray-100 rounded-2xl p-8 hover:border-gray-200 hover:shadow-lg transition-all duration-300">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-purple-100 to-pink-100 rounded-xl flex items-center justify-center">
                    <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900">Design specs</h3>
                </div>
              </div>
              <p className="text-gray-600 mb-6 leading-relaxed">
                Design specification document with detailed UI/UX guidelines and component specifications
              </p>
              <div className="space-y-3">
                <button 
                  onClick={() => onOpenModal('design-spec')}
                  className="w-full bg-white border-2 border-vibe-cyan text-gray-900 font-semibold py-3 px-4 rounded-xl hover:bg-vibe-cyan/5 hover:border-vibe-cyan/80 transition-all duration-200 group-hover:scale-[1.02]"
                >
                  View & Edit
                </button>
                <button 
                  onClick={async () => {
                    if (project?.selectedDesign?.prompt) {
                      const designSpecContent = `# Design Specification Document
## ${project.name}

### Design Theme: ${project.selectedDesign.name}
${project.selectedDesign.description || ''}

---

${project.selectedDesign.prompt}`;
                      try {
                        await navigator.clipboard.writeText(designSpecContent);
                        showCopyFeedback('design');
                      } catch (error) {
                        console.error('Failed to copy to clipboard:', error);
                      }
                    }
                  }}
                  className={`w-full font-semibold py-3 px-4 rounded-xl transition-all duration-200 group-hover:scale-[1.02] ${
                    copyFeedback.design 
                      ? 'bg-green-600 text-white' 
                      : 'bg-gray-900 text-white hover:bg-gray-800'
                  }`}
                >
                  {copyFeedback.design ? '✓ Copied!' : 'Copy'}
                </button>
              </div>
            </div>

            {/* Project context Card */}
            <div className="group bg-white border border-gray-100 rounded-2xl p-8 hover:border-gray-200 hover:shadow-lg transition-all duration-300">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-green-100 to-emerald-100 rounded-xl flex items-center justify-center">
                    <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900">Project context</h3>
                </div>
              </div>
              <p className="text-gray-600 mb-6 leading-relaxed">
                Complete project context combining PRD, design specs, and cursor rules for development guidance
              </p>
              <div className="space-y-3">
                <button 
                  onClick={() => onOpenModal('project-context')}
                  className="w-full bg-white border-2 border-vibe-cyan text-gray-900 font-semibold py-3 px-4 rounded-xl hover:bg-vibe-cyan/5 hover:border-vibe-cyan/80 transition-all duration-200 group-hover:scale-[1.02]"
                >
                  View & Edit
                </button>
                <button 
                  onClick={async () => {
                    try {
                      // Get PRD content
                      const prdFile = project.generatedFiles?.find(f => f.type === 'PRD Document');
                      const prdContent = prdFile?.content || 'PRD not generated yet.';
                      
                      // Get Design Specs content
                      let designSpecContent = '';
                      if (project?.selectedDesign?.prompt) {
                        designSpecContent = `# Design Specification Document
## ${project.name}

### Design Theme: ${project.selectedDesign.name}
${project.selectedDesign.description || ''}

---

${project.selectedDesign.prompt}`;
                      }
                      
                      // Combine all content
                      let combinedContent = prdContent;
                      
                      if (designSpecContent) {
                        combinedContent += '\n\n' + designSpecContent;
                      }
                      
                      // Add cursor rules section
                      combinedContent += '\n\n' + getCursorRulesContent();
                      
                      await navigator.clipboard.writeText(combinedContent);
                      showCopyFeedback('context');
                    } catch (error) {
                      console.error('Failed to copy to clipboard:', error);
                    }
                  }}
                  className={`w-full font-semibold py-3 px-4 rounded-xl transition-all duration-200 group-hover:scale-[1.02] ${
                    copyFeedback.context 
                      ? 'bg-green-600 text-white' 
                      : 'bg-gray-900 text-white hover:bg-gray-800'
                  }`}
                >
                  {copyFeedback.context ? '✓ Copied!' : 'Copy'}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Video Demo Section */}
        <div className="mt-8 text-center">
          <button
            onClick={() => setShowVideoModal(true)}
            className="inline-flex items-center space-x-2 text-vibe-cyan hover:text-vibe-cyan/80 font-semibold transition-colors duration-200"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>Have no idea how to use the files? Watch this video demo</span>
          </button>
        </div>

        {/* Task List Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          
          {/* Your Task list */}
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Your Task list</h2>
            <div className="group bg-white border border-gray-100 rounded-2xl p-8 hover:border-gray-200 hover:shadow-lg transition-all duration-300">
              <div className="space-y-4">
                {isGeneratingTasks ? (
                  <div className="flex items-center py-6">
                    <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full mr-3 animate-spin"></div>
                    <span className="text-sm text-gray-600 font-medium">Creating your development roadmap...</span>
                  </div>
                ) : taskError ? (
                  <div className="py-6 text-center">
                    <p className="text-sm text-gray-600 mb-3">Oops! {taskError}</p>
                    <button
                      onClick={generateNewTaskList}
                      className="text-sm text-vibe-cyan hover:text-vibe-cyan/80 font-semibold hover:underline transition-all duration-200"
                    >
                      Try again
                    </button>
                  </div>
                ) : taskList ? (
                  <>
                    <div className="space-y-3">
                      {displayTasks.map((task, index) => (
                        <div key={index} className="flex items-center space-x-3">
                          <div className={`w-4 h-4 border-2 border-gray-300 rounded ${task.completed ? 'bg-gray-300' : ''}`}></div>
                          <span className={`text-sm ${task.completed ? 'text-gray-500 line-through' : 'text-gray-700'}`}>
                            {task.text}
                          </span>
                        </div>
                      ))}
                    </div>
                    
                    {/* Download button */}
                    <div className="pt-4 border-t border-gray-100">
                      <div className="flex space-x-3">
                        <button 
                          onClick={async () => {
                            try {
                              await navigator.clipboard.writeText(taskList);
                              showCopyFeedback('tasks');
                            } catch (error) {
                              console.error('Failed to copy to clipboard:', error);
                            }
                          }}
                          className={`flex-1 font-semibold py-3 px-4 rounded-xl transition-all duration-200 group-hover:scale-[1.02] ${
                            copyFeedback.tasks 
                              ? 'bg-green-600 text-white' 
                              : 'bg-gray-900 text-white hover:bg-gray-800'
                          }`}
                        >
                          {copyFeedback.tasks ? '✓ Copied!' : 'Copy Task List'}
                        </button>
                        <button
                          onClick={generateNewTaskList}
                          disabled={isGeneratingTasks}
                          className="p-3 text-gray-500 hover:text-gray-700 transition-colors disabled:opacity-50 hover:scale-110 transform duration-200 rounded-xl hover:bg-gray-50"
                          title="Regenerate tasks"
                        >
                          <RefreshCw className={`w-4 h-4 ${isGeneratingTasks ? 'animate-spin' : ''}`} />
                        </button>
                      </div>
                    </div>
                  </>
                ) : (
                  <div className="text-center py-8">
                    <div className="text-gray-400 mb-4">
                      <CheckSquare className="w-12 h-12 mx-auto" />
                    </div>
                    <p className="text-sm text-gray-500 mb-4">No task list generated yet</p>
                    <button 
                      onClick={generateNewTaskList}
                      className="text-sm text-vibe-cyan hover:text-vibe-cyan/80 font-semibold hover:underline transition-all duration-200"
                    >
                      Generate task list
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Your Prompts template */}
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Your Prompts template</h2>
            <div className="group bg-white border border-gray-100 rounded-2xl p-8 hover:border-gray-200 hover:shadow-lg transition-all duration-300">
              <div className="space-y-4">
                {storedPrompts.length > 0 ? (
                  <>
                    <div className="text-sm text-gray-500 mb-3">Generated prompts ({storedPrompts.length})</div>
                    <div className="space-y-3 max-h-64 overflow-y-auto">
                      {storedPrompts.slice(0, 5).map((prompt, index) => (
                        <div key={index} className="p-4 bg-gray-50/50 rounded-xl border border-gray-100 hover:bg-gray-50 hover:border-gray-200 transition-all duration-200 cursor-pointer group/item" onClick={() => {
                          setActiveTab('prompt-templates');
                        }}>
                          <div className="font-semibold text-sm text-gray-900 mb-2 group-hover/item:text-vibe-cyan transition-colors">{prompt.feature}</div>
                          <div className="text-xs text-gray-600 line-clamp-3">{prompt.content.substring(0, 120)}...</div>
                        </div>
                      ))}
                    </div>
                    <button 
                      onClick={() => setActiveTab('prompt-templates')}
                      className="w-full mt-4 text-sm text-vibe-cyan hover:text-vibe-cyan/80 font-semibold hover:underline transition-all duration-200"
                    >
                      View all prompts →
                    </button>
                  </>
                ) : (
                  <div className="text-center py-8">
                    <div className="text-gray-400 mb-4">
                      <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <button 
                      onClick={() => setActiveTab('prompt-templates')}
                      className="text-sm text-vibe-cyan hover:text-vibe-cyan/80 font-semibold hover:underline transition-all duration-200"
                    >
                      Create your first prompt
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const VisualPRDCard = ({ parsedPRD }) => {
  const sections = [
    { key: 'problemStatement', title: 'Problem', icon: 'AlertTriangle' },
    { key: 'solution', title: 'Solution', icon: 'CheckCircle' },
    { key: 'targetAudience', title: 'Audience', icon: 'Users' },
    { key: 'userFlow', title: 'User Flow', icon: 'GitMerge' },
  ];

  const getIcon = (iconName) => {
    const icons = {
      AlertTriangle: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
          />
        </svg>
      ),
      CheckCircle: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
      ),
      Users: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.653-.124-1.28-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.653.124-1.28.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
          />
        </svg>
      ),
      GitMerge: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M18 15l3-3m0 0l-3-3m3 3H9a3 3 0 00-3 3v1m0 0v1a3 3 0 003 3h3m-3-3h3m0 0a3 3 0 003-3V9m-6 9v-1m0 0v-1a3 3 0 013-3h3m-6 0h.01"
          />
        </svg>
      ),
    };
    return <div className="text-slate-500">{icons[iconName]}</div>;
  };
  
  return (
    <div className="grid grid-cols-2 gap-4">
      {sections.map(({ key, title, icon }) => (
        parsedPRD[key] && (
          <div key={key} className="bg-slate-50 p-3 rounded-lg border border-slate-200/60">
            <div className="flex items-center space-x-2 mb-1">
              {getIcon(icon)}
              <h4 className="text-sm font-semibold text-slate-700">{title}</h4>
            </div>
            <p className="text-xs text-slate-500 leading-relaxed truncate max-w-full">
              {parsedPRD[key]}
            </p>
          </div>
        )
      ))}
    </div>
  );
};

const Card = ({ title, onOpen, onGenerate, content, children }) => (
  <motion.div whileHover={{ scale: 1.01 }} className="bg-white rounded-2xl border border-slate-200/80 shadow-sm overflow-hidden">
    <div className="flex items-center justify-between p-4 border-b border-slate-200/80">
      <h3 className="font-semibold text-slate-800">{title}</h3>
      <div className="flex items-center space-x-2">
        <button onClick={onOpen} className="text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors">View</button>
      </div>
    </div>
    <div className="p-6">
      {content !== null ? (
        children
      ) : (
        <div className="text-center py-8">
          <p className="text-slate-500 mb-4">This document hasn't been generated yet.</p>
          <button onClick={onGenerate} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold">Generate Now</button>
        </div>
      )}
    </div>
  </motion.div>
);

const EmptyState = ({ title, description, icon, onGenerate }) => (
  <div className="text-center py-20">
    <div className="text-6xl mb-6">{icon}</div><h3 className="text-2xl font-semibold text-slate-800 mb-4">{title}</h3><p className="text-slate-600 mb-8">{description}</p><motion.button onClick={onGenerate} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} className="bg-slate-800 text-white px-8 py-3 rounded-xl font-semibold hover:bg-slate-700 transition-all duration-200">Generate Now</motion.button>
  </div>
);

const ProjectPromptTemplates = ({ project, availableFeatures }) => {
  const { saveGeneratedFile, getProjectFiles, loading: filesLoading } = useProjectFiles();
  const [features, setFeatures] = useState(availableFeatures);
  const [isAddFeatureModalOpen, setAddFeatureModalOpen] = useState(false);
  const [newFeatureName, setNewFeatureName] = useState('');
  const [selectedFeature, setSelectedFeature] = useState(null);
  const [generatedPrompt, setGeneratedPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [savedPrompts, setSavedPrompts] = useState([]);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [isApiAvailable, setIsApiAvailable] = useState(true);
  const [showCopySuccess, setShowCopySuccess] = useState(false);
  const [draggedFeature, setDraggedFeature] = useState(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const dropZoneRef = React.useRef(null);
  const [showSavedPrompts, setShowSavedPrompts] = useState(false);
  const savedPromptsRef = React.useRef(null);

  useEffect(() => {
    setFeatures(availableFeatures);
  }, [availableFeatures]);
  
  React.useEffect(() => {
    function handleClickOutside(event) {
      if (savedPromptsRef.current && !savedPromptsRef.current.contains(event.target)) setShowSavedPrompts(false);
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [savedPromptsRef]);

  useEffect(() => {
    if (!project?.id || project.id.toString().startsWith('local-')) return;
    const fetchPrompts = async () => {
      try {
        const files = await getProjectFiles(project.id);
        const promptFiles = files.filter(f => f.type === 'Prompt Template').map(f => ({id: f.id, feature: f.metadata?.feature || f.name.replace('-prompt.md', '').replace(/-/g, ' '), content: f.content, createdAt: f.createdAt})).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        setSavedPrompts(promptFiles);
      } catch (error) {
        console.error("Failed to fetch prompts from database", error);
    setSavedPrompts([]);
    }
    };
    fetchPrompts();
    setIsApiAvailable(!!process.env.REACT_APP_OPENAI_API_KEY);
  }, [project?.id]);

  const handleDragStart = (e, feature) => {
    setDraggedFeature(feature);
    e.dataTransfer.setData('text/plain', '');
  };

  const handleDragOver = (e) => { e.preventDefault(); setIsDragOver(true); };
  const handleDragLeave = (e) => { if (!dropZoneRef.current?.contains(e.relatedTarget)) setIsDragOver(false); };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    if (draggedFeature) {
      generatePrompt(draggedFeature);
      setDraggedFeature(null);
    }
  };
    
  const handleSavedPromptClick = (prompt) => {
    setSelectedFeature(prompt.feature);
    setGeneratedPrompt(prompt.content);
  };

  const savePrompt = async () => {
    if (!selectedFeature || !generatedPrompt || !project?.id || project.id.toString().startsWith('local-')) return;
    try {
      const newFile = await saveGeneratedFile(project.id, { fileName: `${selectedFeature.replace(/\s+/g, '-')}-prompt.md`, fileType: 'Prompt Template', content: generatedPrompt, metadata: { feature: selectedFeature } });
      const newPrompt = { id: newFile.id, feature: selectedFeature, content: generatedPrompt, createdAt: newFile.createdAt };
      setSavedPrompts(prev => [newPrompt, ...prev]);
      setShowSuccessMessage(true);
      setTimeout(() => setShowSuccessMessage(false), 2000);
    } catch (error) {
      console.error("Failed to save prompt:", error);
      alert("There was an error saving your prompt. Please try again.");
    }
  };

  const generatePrompt = async (feature) => {
    setSelectedFeature(feature);
    setIsGenerating(true);
    setGeneratedPrompt('');
    try {
      const context = { name: project.name, type: project.type, description: project.description, framework: project.framework, features: features };
      const prompt = await generatePromptForFeature(feature, context);
      setGeneratedPrompt(prompt);
    } catch (error) {
      console.error('Error generating prompt:', error);
      setGeneratedPrompt(`Error: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleFeatureClick = (feature) => generatePrompt(feature);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generatedPrompt);
      setShowCopySuccess(true);
      setTimeout(() => setShowCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy!', err);
    }
  };

  const handleAddFeature = () => {
    if (newFeatureName.trim()) {
      const newFeature = newFeatureName.trim();
      if (!features.includes(newFeature)) {
        setFeatures(prev => [...prev, newFeature]);
      }
      generatePrompt(newFeature);
      setNewFeatureName('');
      setAddFeatureModalOpen(false);
    }
  };

  if (!isApiAvailable) return <div>Your OpenAI API key is not configured. Please set it up to use this feature.</div>;

  return (
    <div className="p-4 sm:p-6 md:p-8 bg-white">
      <AddFeatureModal 
        isOpen={isAddFeatureModalOpen}
        onClose={() => setAddFeatureModalOpen(false)}
        newFeatureName={newFeatureName}
        setNewFeatureName={setNewFeatureName}
        onAddFeature={handleAddFeature}
      />
      <div className="flex justify-between items-start mb-8">
        <div><h2 className="text-2xl font-bold text-gray-900">Prompt Generator</h2><p className="text-gray-500 mt-1">Select or drag a feature to generate a detailed prompt.</p></div>
        <div className="relative" ref={savedPromptsRef}>
          <button onClick={() => setShowSavedPrompts(!showSavedPrompts)} className="flex items-center space-x-2 px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"><History className="w-4 h-4" /><span>History</span></button>
          {showSavedPrompts && (
            <motion.div initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} className="absolute top-full right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border z-10">
              <div className="p-3 border-b"><h4 className="font-semibold">Saved Prompts</h4></div>
              <div className="p-2 max-h-96 overflow-y-auto">{savedPrompts.length > 0 ? savedPrompts.map((prompt) => (<button key={prompt.id} onClick={() => { handleSavedPromptClick(prompt); setShowSavedPrompts(false); }} className="w-full text-left p-2 rounded-md hover:bg-gray-100"><div className="font-medium text-sm">{prompt.feature}</div><p className="text-xs text-gray-500 truncate">{prompt.content}</p></button>)) : <div className="p-4 text-center text-sm text-gray-500">No saved prompts yet.</div>}</div>
             </motion.div>
           )}
         </div>
            </div>
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-800">Available Features</h3>
          <button onClick={() => setAddFeatureModalOpen(true)} className="flex items-center space-x-1.5 px-3 py-1.5 text-sm bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
            <Plus className="w-4 h-4" />
            <span>Add Feature</span>
          </button>
        </div>
        <div className="flex flex-wrap gap-3">
              {features.map((feature, index) => (
            <motion.div key={index} draggable onDragStart={(e) => handleDragStart(e, feature)} onClick={() => handleFeatureClick(feature)} whileHover={{ y: -2, boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }} title="Click or drag to generate" className={`flex items-center space-x-2 px-4 py-2 rounded-full cursor-grab transition-all ${selectedFeature === feature ? 'bg-gray-800 text-white' : 'bg-white border border-gray-200'}`}>
              <GripVertical className="w-4 h-4 text-gray-400" /><span className="font-medium">{feature}</span>
            </motion.div>
                  ))}
                </div>
              </div>
      <div
        ref={dropZoneRef}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        className={`relative rounded-xl border-2 border-dashed p-6 transition-all duration-300 flex flex-col ${
          isDragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300 bg-gray-50/50'
        }`}
        style={{ minHeight: '400px' }}
      >
        {isGenerating ? (
          <div className="absolute inset-0 flex flex-col items-center justify-center text-center">
                 <motion.div
                   animate={{ rotate: 360 }}
              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
              className="w-10 h-10 border-2 border-gray-400 border-t-gray-800 rounded-full mb-4"
                 />
            <p className="text-gray-600">Generating prompt for "{selectedFeature}"...</p>
               </div>
        ) : generatedPrompt ? (
          <>
            <div className="flex items-center justify-between mb-4 flex-shrink-0">
              <h3 className="text-lg font-semibold text-gray-800">Generated Prompt</h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={copyToClipboard}
                  title="Copy to clipboard"
                  className="p-2 text-gray-500 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                >
                  {showCopySuccess ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                </button>
                <button
                         onClick={savePrompt}
                  disabled={!generatedPrompt}
                  className="px-4 py-2 text-sm bg-vibe-cyan text-black rounded-lg hover:shadow-md disabled:bg-gray-300 disabled:text-gray-500 disabled:hover:shadow-none transition-all font-semibold"
                       >
                  {showSuccessMessage ? 'Saved!' : 'Save Prompt'}
                </button>
              </div>
            </div>
            <textarea
              value={generatedPrompt}
              onChange={(e) => setGeneratedPrompt(e.target.value)}
              className="w-full flex-grow p-4 bg-white border border-gray-200 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
              placeholder="Generated prompt will appear here..."
            />
          </>
        ) : (
          <div className="absolute inset-0 flex flex-col items-center justify-center text-center text-gray-500">
            <Zap className="w-10 h-10 text-gray-400 mb-4" />
            <h3 className="text-lg font-semibold text-gray-700">Select or drag a feature here</h3>
            <p className="mt-1">Your tailored implementation prompt will appear here.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectDetail; 